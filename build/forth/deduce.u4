//
//	Deduce, based on the original by Joe Weisbecker
//
//	Mastermind with 4 numbers, 15 goes to win.
//

: initialise 2 1 >port 3 2 >Port 1 1 >port 1 2 >Port ;								// Turn screen and keyboard on ( - )

: key random drop inkey dup 0< if drop self then ;									// Wait for key stroke ( - key)

: !+1 swap over ! 1+ ;																// (n addr - addr+1)
: 4! !+1 !+1 !+1 !+1 drop ;

variable answer alloc 4 															// answer and guess
variable guess alloc 4

variable blackPegs  																// correct colour and place
variable whitePegs 																	// correct colour wrong place.
variable turns 																		// number of turns left.

// This section calculates black and white scores

: checkMatch answer + @ swap guess + @ = ; 											// (a b - matches)

: markAnswerUnused answer + dup @ 127 and swap ! ; 									// Mark answer as markAnswerUnused
: markAnswerUsed answer + dup @ 128 or swap ! ;										// Mark answer as used.

: checkBlack 
	dup markAnswerUnused
	dup dup checkMatch if 1 blackPegs +! markAnswerUsed ; drop ;

: __checkWhite 																		// (answer guess - answer)
	over checkMatch 																// (answer match - )
	if 1 whitePegs +! dup markAnswerUsed then ;

: checkWhite 0 __checkWhite 1 __checkWhite 2 __checkWhite 3 __checkWhite drop ;

: scoreCalculate 0 blackPegs ! 0 whitePegs ! 										// Clear Scores.
	0 checkBlack 1 checkBlack 2 checkBlack 3 checkBlack 							// Check each guess/answer pair (black pegs)
																					// after this all used guesses are marked.
	0 checkWhite 1 checkWhite 2 checkWhite 3 checkWhite 							// Check each answer against wrong guesses.
;

// This section displays pegs 

: drawpeg dup 2* 2* 2* 16 + swap if sprite [06FCFCFC787878] then sprite [06FC84CC484878]  // (x type - )

: drawNPegs 																		// (count type - )
	over 0= if drop drop ; 															// Exit if count is zero.
	swap 1- swap over over 															// (count-1 type count-1 type)
	swap 2* 2* 2* 0- 56 + swap 														// (count-1 type xPos type)
	drawPeg 																		// draw a peg
	self
;

: scoreShow  blackPegs @ 0 drawNPegs whitePegs @ 1 drawNPegs ;

: xdigit digit 

: >= - 0< 0= ;	

// Calculate an answer 

: createDigit random 15 and dup 10 >= if drop self ; swap answer + ! ;				// (answerSlot -)

: _compare answer + @ swap answer + @ = or ; 										// (runningEqual slot1 slot 2 - runningEqual)

: createAnswer 0 createDigit 1 createDigit 2 createDigit 3 createDigit 
	0 0 1 _compare 0 2 _compare 0 3 _compare 1 2 _compare 1 3 _compare 2 3 _compare 
	if self then ;

//	Display the turns.

: displayTurns turns @ dup 10 >= if 52 1 1 xdigit 10 - then 58 1 rot xdigit ;

: xDigitPos dup 2* + 2* 3 + ;
: questionMark 10 sprite [07F8880838200020]

: decKey key 15 and dup 10 >= if drop self then ;

: enterDigit 
	dup xDigitPos questionMark decKey swap dup xDigitPos questionMark 			// (key x -)
	over over xDigitPos 11 rot xdigit 											// (key x -)
	guess + ! 46 40 beep ;
	
: query sprite [087070F8F8702000F8]												// press key sprite.

: lose0 24 13 sprite [058E8A8A8AEE]												// Display LOSE.
: lose1 32 13 sprite [05EE88EE28EE]

: mainloop

	clearscreen displayTurns

	turns @ 16 = if lose0 lose1 stop then 

	0 enterDigit 1 enterDigit 2 enterDigit 3 enterDigit

	scoreCalculate scoreShow 

	blackPegs @ 4 = if stop then

	key	1 turns +! self

: __main 
	 initialise 1 turns ! clearscreen 29 12 query 

	 key drop 
	 createAnswer mainloop
