 AS V1.42 Beta [Bld 102] - source file test.asm - page 1 - 7/6/2016 23:19:34


       1/       0 :                     ; ********************************************************************************************************************
       2/       0 :                     ; ********************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;													Test File
       5/       0 :                     ;
       6/       0 :                     ; ********************************************************************************************************************
       7/       0 :                     ; ********************************************************************************************************************
       8/       0 :                     
       9/       0 : =$40                scWidth = 64 																; screen dimensions.
      10/       0 : =$20                scHeight = 32
      11/       0 :                     
      12/       0 : =$400               memorySize = 1024 															; memory size built for.
      13/       0 :                     
      14/       0 : =0123456789         font = "0123456789" 														; what characters are being used.
      15/       0 :                     
      16/       0 : =$1                 lib_text = 1 																; use the text library and install font data
      17/       0 :                     
      18/       0 :                     	include core.asm 														; install FredOS :)
(1)    1/       0 :                     ; ********************************************************************************************************************
(1)    2/       0 :                     ; ********************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;													Core code 
(1)    5/       0 :                     ;													=========
(1)    6/       0 :                     ;	
(1)    7/       0 :                     ;	This is the code that is mandatory : boot up code, short call handler, short register loader, interrupt routine.
(1)    8/       0 :                     ;	anything else is optional.
(1)    9/       0 :                     ;
(1)   10/       0 :                     ;	Even those it says CPU 1802, it is actually for a 1801.
(1)   11/       0 :                     ; ********************************************************************************************************************
(1)   12/       0 :                     ; ********************************************************************************************************************
(1)   13/       0 :                     
(1)   14/       0 :                     	cpu 	1802
(1)   15/       0 :                     
(1)   16/       0 : =0H                 r0 = 0 																		; DMA for video / keyboard
(1)   17/       0 : =1H                 r1 = 1 																		; Interrupt routine
(1)   18/       0 : =2H                 r2 = 2 																		; Stack
(1)   19/       0 : =3H                 r3 = 3 																		; Normal Running Register
(1)   20/       0 :                     
(1)   21/       0 : =4H                 r4 = 4 																		; user registers (r4 - ra)
(1)   22/       0 : =5H                 r5 = 5
(1)   23/       0 : =6H                 r6 = 6
(1)   24/       0 : =7H                 r7 = 7
(1)   25/       0 : =8H                 r8 = 8
(1)   26/       0 : =9H                 r9 = 9
(1)   27/       0 : =AH                 ra = 10
(1)   28/       0 :                     
(1)   29/       0 : =BH                 rb = 11 																	; RB.0 RB.1 RC.0 changed by vcall and lrs.
(1)   30/       0 : =CH                 rc = 12 																	; RC.1 current key press $FF none
(1)   31/       0 : =DH                 rd = 13 																	; address of video RAM
(1)   32/       0 : =EH                 re = 14 																	; call handler
(1)   33/       0 : =FH                 rf = 15 																	; 3 byte 16 bit register loader.
(1)   34/       0 :                     
(1)   35/       0 :                     ; ********************************************************************************************************************
(1)   36/       0 :                     ;
(1)   37/       0 :                     ;													Relevant constants
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; ********************************************************************************************************************
(1)   40/       0 :                     
(1)   41/       0 : =2H                 controlPort = 2 															; control port (bit 7 sound, 0/1 row/col)
(1)   42/       0 : =100H               videoRAMSize = scWidth * scHeight / 8 										; amount of RAM allocated to memory.
 AS V1.42 Beta [Bld 102] - source file test.asm(core.asm) - page 2 - 7/6/2016 23:19:34


(1)   43/       0 : =3H                 videoControlBits = (scWidth/64)+(scHeight/32)*2 							; bits written to video control port.
(1)   44/       0 :                     
(1)   45/       0 :                     ; ********************************************************************************************************************
(1)   46/       0 :                     ;
(1)   47/       0 :                     ;														Various Macros
(1)   48/       0 :                     ;
(1)   49/       0 :                     ; ********************************************************************************************************************
(1)   50/       0 :                     
(1)   51/       0 :                     lrs macro 	register,value 													; load register slow 12 bit.
(1)   52/       0 :                     	sep 	rf
(1)   53/       0 :                     	db 		((register)*16)+(((value) / 256) & 15)
(1)   54/       0 :                     	db 		(value) & 255
(1)   55/       0 :                     	endm
(1)   56/       0 :                     
(1)   57/       0 :                     vCall macro function 														; call given routine by number
(1)   58/       0 :                     	sep 	re
(1)   59/       0 :                     	db 		function
(1)   60/       0 :                     	endm
(1)   61/       0 :                     
(1)   62/       0 :                     vReturn macro 																; return from routine is VCALL 0
(1)   63/       0 :                     	vCall	0 																
(1)   64/       0 :                     	endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; ********************************************************************************************************************
(1)   67/       0 :                     ;
(1)   68/       0 :                     ; 	Start up first part. Runs in P = 0 X = 0. Sets up Stack (R2) Interrupt (R1) RegLoader (RF) then loads P3
(1)   69/       0 :                     ;	and goes to X = 2 P = 3 with interrupts enabled.
(1)   70/       0 :                     ;
(1)   71/       0 :                     ; ********************************************************************************************************************
(1)   72/       0 :                     
(1)   73/       0 : 71                  	dis 																	; disable interrupts
(1)   74/       1 : 00                  	db 		00h
(1)   75/       2 : F8 03               	ldi 	(memorySize-videoRAMSize) / 256 								; set up R2 (stack) and RD (video ram addr)
(1)   76/       4 : B2                  	phi 	r2 																; which are the same value.
(1)   77/       5 : BD                  	phi 	rd 																; stack down, video memory up.
(1)   78/       6 : F8 00               	ldi 	(memorySize-videoRAMSize) & 255 	
(1)   79/       8 : A2                  	plo 	r2
(1)   80/       9 : AD                  	plo 	rd
(1)   81/       A :                     
(1)   82/       A : 90                  	ghi 	r0 																; set up RF (12 bit register loader function)
(1)   83/       B : BF                  	phi 	rf 																; and R1 (interrupt handler)
(1)   84/       C : BE                  	phi 	re 																; and RE (call function)
(1)   85/       D : B1                  	phi 	r1 																; all of which are in page zero.
(1)   86/       E : F8 28               	ldi 	regLoader & 255
(1)   87/      10 : AF                  	plo 	rf
(1)   88/      11 : F8 46               	ldi 	interrupt & 255
(1)   89/      13 : A1                  	plo 	r1
(1)   90/      14 : F8 5C               	ldi 	callHandler & 255
(1)   91/      16 : AE                  	plo 	re
(1)   92/      17 :                     
(1)   93/      17 : F8 FF               	ldi 	0FFh 															; clear keyboard read flag RC.1 to no key.
(1)   94/      19 : BC                  	phi 	rc
(1)   95/      1A :                     
(1)   96/      1A : 62                  	out 	controlPort 													; write to control port 	
(1)   97/      1B : 03                  	db 		videoControlBits 												; the video setup.
(1)   98/      1C :                     
(1)   99/      1C : F8 00               	ldi 	main / 256 														; R3 = main program (may not be on this page)
(1)  100/      1E : B3                  	phi 	r3
(1)  101/      1F : F8 EE               	ldi 	main & 255
(1)  102/      21 : A3                  	plo 	r3
 AS V1.42 Beta [Bld 102] - source file test.asm(core.asm) - page 3 - 7/6/2016 23:19:34


(1)  103/      22 : 70                  	ret  																	; now run in R3, set X=2 and enable interrupts.
(1)  104/      23 : 23                  	db 		023h
(1)  105/      24 :                     
(1)  106/      24 :                     
(1)  107/      24 :                     ; ********************************************************************************************************************
(1)  108/      24 :                     ;
(1)  109/      24 :                     ;											Table of word addresses to routines
(1)  110/      24 :                     ;
(1)  111/      24 :                     ; ********************************************************************************************************************
(1)  112/      24 :                     
(1)  113/      24 :                     	include vector.mod 														; this table is generated.
(2)    1/      24 :                     ;
(2)    2/      24 :                     ; generated vector table
(2)    3/      24 :                     ;
(2)    4/      24 :                     C_PrintString:
(2)    5/      24 : 00 77                   dw FUNC_PrintString
(2)    6/      26 :                     C_PrintChar:
(2)    7/      26 : 00 82                   dw FUNC_PrintChar
(2)    8/      28 :                     
(1)  114/      28 :                     
(1)  115/      28 :                     ; ********************************************************************************************************************
(1)  116/      28 :                     ;
(1)  117/      28 :                     ;	Slow compact Rn loader. Uses RF. Following 2 bytes have the register number in the upper 4 bits
(1)  118/      28 :                     ; 	and a 12 bit value to load in the lower 4 bites. Preserves D but not DF. Reentrant.
(1)  119/      28 :                     ;
(1)  120/      28 :                     ;	Code which needs to be executed quickly should consider the LDI/PHI/LDI/PLO sequence - this is 4-5 times
(1)  121/      28 :                     ; 	slower but uses 3 bytes not 6. 80:20 rule.
(1)  122/      28 :                     ;
(1)  123/      28 :                     ;	 										THIS CODE IS SELF MODIFYING
(1)  124/      28 :                     ; ********************************************************************************************************************
(1)  125/      28 :                     
(1)  126/      28 :                     regLoader:
(1)  127/      28 : AC                  	plo 	rc 																; preserve D
(1)  128/      29 : 9F                  	ghi 	rf 																; point RB to self modifying code
(1)  129/      2A : BB                  	phi 	rb
(1)  130/      2B : F8 3F               	ldi 	regLoader_putHigh 
(1)  131/      2D : AB                  	plo 	rb
(1)  132/      2E : 43                  	lda 	r3 																; get reg number / upper 4 bits
(1)  133/      2F : 23                  	dec 	r3 																; unpick increment
(1)  134/      30 : F6                  	shr 																	; isolate bits 4..7, register number.
(1)  135/      31 : F6                  	shr
(1)  136/      32 : F6                  	shr
(1)  137/      33 : F6                  	shr
(1)  138/      34 : F9 B0               	ori 	0B0h 															; make it PHI <register number>
(1)  139/      36 : 5B                  	str 	rb 																; save at "PHI" point
(1)  140/      37 : 1B                  	inc 	rb 																; advance RF to "PLO" point
(1)  141/      38 : 1B                  	inc 	rb
(1)  142/      39 : FB 10               	xri 	010h 															; make it PLO <register number>
(1)  143/      3B : 5B                  	str 	rb 																; save at "PLO" point
(1)  144/      3C : 43                  	lda 	r3 																; reload first byte
(1)  145/      3D : FA 0F               	ani 	0Fh 															; only want lower 4 bits
(1)  146/      3F :                     regLoader_putHigh:
(1)  147/      3F : B0                  	phi 	0 																; these two phi and plo are modified.
(1)  148/      40 : 43                  	lda 	r3
(1)  149/      41 : A0                  	plo 	0
(1)  150/      42 : 8C                  	glo 	rc 																; restore D
(1)  151/      43 : D3                  	sep 	r3 																; return and re-enter
(1)  152/      44 : 30 28               	br 		regLoader  														
(1)  153/      46 :                     
(1)  154/      46 :                     ; ********************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file test.asm(core.asm) - page 4 - 7/6/2016 23:19:34


(1)  155/      46 :                     ;
(1)  156/      46 :                     ;	Interrupt handler. Sets up R0 with the value held in RD (Video Memory pointer). If R0 is $01 or $81 on
(1)  157/      46 :                     ; 	entry then it assumes a DMA In has been done and copies the byte before into RC.1
(1)  158/      46 :                     ;
(1)  159/      46 :                     ; ********************************************************************************************************************
(1)  160/      46 :                     
(1)  161/      46 :                     interrupt:
(1)  162/      46 : 22                  	dec 	r2 																; save XP on stack.
(1)  163/      47 : 78                  	sav
(1)  164/      48 : 22                  	dec 	r2 																; save D on stack
(1)  165/      49 : 52                  	str 	r2
(1)  166/      4A : 80                  	glo 	r0 																; look at R0 bits 0..6
(1)  167/      4B : FA 7F               	ani 	7Fh
(1)  168/      4D : FB 01               	xri 	01h
(1)  169/      4F : 3A 54               	bnz 	interrupt_nokey 												; if $01 then DMA was done this frame
(1)  170/      51 : 20                  	dec 	r0 																; get the data that was input (one byte only)
(1)  171/      52 : 40                  	lda 	r0
(1)  172/      53 : BC                  	phi 	rc 																; and save in RC.1
(1)  173/      54 :                     interrupt_nokey:
(1)  174/      54 : 9D                  	ghi 	rd 																; copy RD (video RAM address) to R0
(1)  175/      55 : B0                  	phi 	r0
(1)  176/      56 : 8D                  	glo 	rd
(1)  177/      57 : A0                  	plo 	r0
(1)  178/      58 : 42                  	lda 	r2 																; restore D
(1)  179/      59 : 70                  	ret 																	; restore XP
(1)  180/      5A : 30 46               	br 		interrupt
(1)  181/      5C :                     
(1)  182/      5C :                     ; ********************************************************************************************************************
(1)  183/      5C :                     ;
(1)  184/      5C :                     ; 		Call routine where the byte after the call is the address in page 0 of the new routine. If the byte is
(1)  185/      5C :                     ;		zero, then this is a return from a caller. Preserves D and DF on call or return.
(1)  186/      5C :                     ;
(1)  187/      5C :                     ; ********************************************************************************************************************
(1)  188/      5C :                     
(1)  189/      5C :                     callHandler:
(1)  190/      5C : AC                  	plo 	rc 																; save D register
(1)  191/      5D : 43                  	lda 	r3 																; read the function number
(1)  192/      5E : 32 71               	bz 		__callHandler_Return 											; if zero, then do a return.
(1)  193/      60 : AB                  	plo 	rb 																; save in RD.0
(1)  194/      61 : 9E                  	ghi 	re 																; make RD.1 point to zero page
(1)  195/      62 : BB                  	phi 	rb
(1)  196/      63 :                     
(1)  197/      63 : 93                  	ghi 	r3 																; push R3.1 on the stack
(1)  198/      64 : 22                  	dec 	r2
(1)  199/      65 : 52                  	str 	r2
(1)  200/      66 : 83                  	glo 	r3 																; push R3.0 on the stack.
(1)  201/      67 : 22                  	dec 	r2
(1)  202/      68 : 52                  	str 	r2
(1)  203/      69 :                     
(1)  204/      69 : 4B                  	lda 	rb 																; read routine address into R3
(1)  205/      6A : B3                  	phi 	r3
(1)  206/      6B : 4B                  	lda 	rb 	
(1)  207/      6C : A3                  	plo 	r3
(1)  208/      6D :                     
(1)  209/      6D :                     __callHandler_Exit:
(1)  210/      6D : 8C                  	glo 	rc 																; restore D register
(1)  211/      6E : D3                  	sep 	r3 																; switch back to R3
(1)  212/      6F : 30 5C               	br 		callHandler
(1)  213/      71 :                     
(1)  214/      71 :                     __callHandler_Return:
 AS V1.42 Beta [Bld 102] - source file test.asm(core.asm) - page 5 - 7/6/2016 23:19:34


(1)  215/      71 : 42                  	lda 	r2 																; pop return address, then restore D and switch
(1)  216/      72 : A3                  	plo 	r3
(1)  217/      73 : 42                  	lda 	r2
(1)  218/      74 : B3                  	phi 	r3
(1)  219/      75 : 30 6D               	br 		__callHandler_Exit
(1)  220/      77 :                     
(1)  221/      77 :                     ; ********************************************************************************************************************
(1)  222/      77 :                     ;
(1)  223/      77 :                     ;						Print String at R9, terminated by $FF. On exit R9 points to byte after it.
(1)  224/      77 :                     ;
(1)  225/      77 :                     ; ********************************************************************************************************************
(1)  226/      77 :                     
(1)  227/      77 :                     FUNC_PrintString:
(1)  228/      77 : =>TRUE              	if 		lib_text
(1)  229/      77 : 49                  	lda 	r9 																; get character
(1)  230/      78 : FB FF               	xri 	0FFh 															; check if end of string $FF
(1)  231/      7A : 32 BC               	bz 		__FPrint_VReturn 												; if so, go to the vreturn in print char 
(1)  232/      7C : FB FF               	xri 	0FFh 															; fix character back
(1)  233/      7E : (MACRO)             	vcall 	C_PrintChar 													; print it
(1)  233/      7E : DE                          sep     re
(1)  233/      7F : 26                          db              C_PRINTCHAR
(1)  234/      80 : 30 77               	br 		FUNC_PrintString 												; and try again.
(1)  235/      82 : [228]               	endif
(1)  236/      82 :                     
(1)  237/      82 :                     ; ********************************************************************************************************************
(1)  238/      82 :                     ;
(1)  239/      82 :                     ;					Print character. RA is the current position (LSB is memory offset, MSB is bit)
(1)  240/      82 :                     ;
(1)  241/      82 :                     ;	uses temporary registers RC.0 and RB, also RE is used in the call but reset afterwards. RA is updated to the
(1)  242/      82 :                     ; 	next space.
(1)  243/      82 :                     ; ********************************************************************************************************************
(1)  244/      82 :                     
(1)  245/      82 :                     FUNC_PrintChar:
(1)  246/      82 : =>TRUE              	if 		lib_text
(1)  247/      82 : EB                  	sex 	rb 																; use RB as index register
(1)  248/      83 : AC                  	plo 	rc 																; save in RC.
(1)  249/      84 : (MACRO)             	lrs 	re,__fontData 													; point R9 to fontdata.
(1)  249/      84 : DF                          sep     rf
(1)  249/      85 : E0                          db              ((RE)*16)+(((__FONTDATA) / 256) & 15)
(1)  249/      86 : BE                          db              (__FONTDATA) & 255
(1)  250/      87 :                     __FFindCharacter:
(1)  251/      87 : 8C                  	glo 	rc 																; character counter zero ?
(1)  252/      88 : 32 91               	bz 		__FPrintLoop2 													; go print.
(1)  253/      8A :                     __FFindNext:
(1)  254/      8A : 4E                  	lda 	re 																; keep advancing until and end marker (bit 0)
(1)  255/      8B : F6                  	shr 																	; found
(1)  256/      8C : 3B 8A               	bnf 	__FFindNext
(1)  257/      8E : 2C                  	dec 	rc 																; dec character counter e.g. found one more.
(1)  258/      8F : 30 87               	br 		__FFindCharacter
(1)  259/      91 :                     ;
(1)  260/      91 :                     ;	Print next column of pixels from RE.
(1)  261/      91 :                     ;
(1)  262/      91 :                     __FPrintLoop2:
(1)  263/      91 : 8A                  	glo 	ra 																; copy current position into RB from RA.0
(1)  264/      92 : AB                  	plo 	rb 																; (position) and RD.1 (video high)
(1)  265/      93 : 9D                  	ghi 	rd
(1)  266/      94 : BB                  	phi 	rb
(1)  267/      95 :                     
(1)  268/      95 : 4E                  	lda 	re 																; get the next byte of video data
(1)  269/      96 : F6                  	shr 		 															; shift right, throwing the end marker.
 AS V1.42 Beta [Bld 102] - source file test.asm(core.asm) - page 6 - 7/6/2016 23:19:34


(1)  270/      97 :                     __FPrintLoop1:
(1)  271/      97 : F6                  	shr 																	; shift right and put in RC.0
(1)  272/      98 : AC                  	plo 	rc
(1)  273/      99 : 3B 9E               	bnf 	__FPrintNoPixel 												; if 0 was shifted in.
(1)  274/      9B : 9A                  	ghi 	ra 																; get bitmask from RA.1
(1)  275/      9C : F1                  	or 																		; OR into display.
(1)  276/      9D : 5B                  	str 	rb
(1)  277/      9E :                     __FPrintNoPixel:
(1)  278/      9E : 8B                  	glo 	rb 																; move address to next line down
(1)  279/      9F : FC 08               	adi 	scWidth/8
(1)  280/      A1 : AB                  	plo 	rb
(1)  281/      A2 : 8C                  	glo 	rc 																; get mask back into D.
(1)  282/      A3 : 3A 97               	bnz 	__FPrintLoop1 													; back if more to print for this column.
(1)  283/      A5 :                     
(1)  284/      A5 :                     __FPrintNext:
(1)  285/      A5 : 9A                  	ghi 	ra 																; shift RA.1 (the bitmask) right.
(1)  286/      A6 : F6                  	shr 
(1)  287/      A7 : BA                  	phi 	ra 
(1)  288/      A8 : 3B AE               	bnf 	__FNotAdvance 													; if DF set then bit 7 of next.
(1)  289/      AA : 1A                  	inc 	ra 																; increment RA.0 - next byte right
(1)  290/      AB : F8 80               	ldi 	080h 															; reset mask in RA.1 to $80 (first bit)
(1)  291/      AD : BA                  	phi 	ra
(1)  292/      AE :                     __FNotAdvance:
(1)  293/      AE : 2E                  	dec 	re 																; re-read last one column data
(1)  294/      AF : 4E                  	lda 	re
(1)  295/      B0 : F6                  	shr
(1)  296/      B1 : 3B 91               	bnf 	__FPrintLoop2 													; if not first of next one, go back.
(1)  297/      B3 : 1C                  	inc 	rc 																; first time round RC.0 will be zero.
(1)  298/      B4 : 8C                  	glo 	rc 																; second time round it will be 1,
(1)  299/      B5 : FB 01               	xri 	1 																; so we do the 'next space' one more time.
(1)  300/      B7 : 32 A5               	bz 		__FPrintNext
(1)  301/      B9 : (MACRO)             	lrs 	re,callHandler 													; reinstate RE vector.
(1)  301/      B9 : DF                          sep     rf
(1)  301/      BA : E0                          db              ((RE)*16)+(((CALLHANDLER) / 256) & 15)
(1)  301/      BB : 5C                          db              (CALLHANDLER) & 255
(1)  302/      BC :                     __FPrint_VReturn:
(1)  303/      BC : (MACRO)             	vReturn
(1)  303/      BC :  (MACRO-2)                  vCall   0                                                                                                                               
(1)  303/      BC : DE                          sep     re
(1)  303/      BD : 00                          db              0
(1)  304/      BE : [246]               	endif
(1)  305/      BE :                     
(1)  306/      BE :                     ; ********************************************************************************************************************
(1)  307/      BE :                     ;
(1)  308/      BE :                     ;												Included fonts, if any
(1)  309/      BE :                     ;
(1)  310/      BE :                     ; ********************************************************************************************************************
(1)  311/      BE :                     	
(1)  312/      BE : =>TRUE              	if 		lib_text
(1)  313/      BE :                     	include font.mod 														; any fonts requested loaded here.
(2)    1/      BE :                     ;
(2)    2/      BE :                     ; generated fonts
(2)    3/      BE :                     ;
(2)    4/      BE :                     __fontData:
(2)    5/      BE : 7C 82 82 82 7D          db 07ch,082h,082h,082h,07dh         ; '0' code 125
(2)    6/      C3 : 84 FE 81                db 084h,0feh,081h                   ; '1' code 129
(2)    7/      C6 : E4 92 92 92 8D          db 0e4h,092h,092h,092h,08dh         ; '2' code 141
(2)    8/      CB : 44 92 92 92 6D          db 044h,092h,092h,092h,06dh         ; '3' code 109
(2)    9/      D0 : 30 28 24 FE 21          db 030h,028h,024h,0feh,021h         ; '4' code 33
(2)   10/      D5 : 5E 92 92 92 73          db 05eh,092h,092h,092h,073h         ; '5' code 115
 AS V1.42 Beta [Bld 102] - source file test.asm(font.mod) - page 7 - 7/6/2016 23:19:34


(2)   11/      DA : 7C 92 92 92 65          db 07ch,092h,092h,092h,065h         ; '6' code 101
(2)   12/      DF : 82 42 22 12 0F          db 082h,042h,022h,012h,00fh         ; '7' code 15
(2)   13/      E4 : 6C 92 92 92 6D          db 06ch,092h,092h,092h,06dh         ; '8' code 109
(2)   14/      E9 : 4C 92 92 92 7D          db 04ch,092h,092h,092h,07dh         ; '9' code 125
(2)   15/      EE :                     
(1)  314/      EE : [312]               	endif
(1)  315/      EE :                     
      19/      EE :                     
      20/      EE :                     main:
      21/      EE : F8 20               	ldi 	020h
      22/      F0 : BA                  	phi 	ra
      23/      F1 : F8 88               	ldi 	088h
      24/      F3 : AA                  	plo 	ra
      25/      F4 : (MACRO)             	lrs 	r9,text
      25/      F4 : DF                          sep     rf
      25/      F5 : 90                          db              ((R9)*16)+(((TEXT) / 256) & 15)
      25/      F6 : FB                          db              (TEXT) & 255
      26/      F7 : (MACRO)             	vcall	C_PrintString
      26/      F7 : DE                          sep     re
      26/      F8 : 24                          db              C_PRINTSTRING
      27/      F9 :                     loop:
      28/      F9 : 30 F9               	br 		loop
      29/      FB :                     
      30/      FB :                     text:
      31/      FB : 00 01 09 05 03 FF   	db 		0,1,9,5,3,0FFh
 AS V1.42 Beta [Bld 102] - source file test.asm - page 8 - 7/6/2016 23:19:34


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - |  CALLHANDLER :                   5C C |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLPORT :                    2 - |  C_PRINTCHAR :                   26 C |
 C_PRINTSTRING :                 24 C | *DATE :                    7/6/2016 - |
*FALSE :                          0 - | *FONT :                  0123456789 - |
*FULLPMMU :                       1 - |  FUNC_PRINTCHAR :                82 C |
 FUNC_PRINTSTRING :              77 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INTERRUPT :                     46 C |  INTERRUPT_NOKEY :               54 C |
 LIB_TEXT :                       1 - | *LISTON :                         1 - |
 LOOP :                          F9 C | *MACEXP :                         1 - |
 MAIN :                          EE C |  MEMORYSIZE :                   400 - |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - |  R0 :                             0 - |
 R1 :                             1 - |  R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *R6 :                             6 - |
*R7 :                             7 - | *R8 :                             8 - |
 R9 :                             9 - |  RA :                             A - |
 RB :                             B - |  RC :                             C - |
 RD :                             D - |  RE :                             E - |
 REGLOADER :                     28 C |  REGLOADER_PUTHIGH :             3F C |
*RELAXED :                        0 - |  RF :                             F - |
 SCHEIGHT :                      20 - |  SCWIDTH :                       40 - |
 TEXT :                          FB C | *TIME :                    23:19:34 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 VIDEOCONTROLBITS :               3 - |  VIDEORAMSIZE :                 100 - |
 __CALLHANDLER_EXIT :            6D C |  __CALLHANDLER_RETURN :          71 C |
 __FFINDCHARACTER :              87 C |  __FFINDNEXT :                   8A C |
 __FNOTADVANCE :                 AE C |  __FONTDATA :                    BE C |
 __FPRINTLOOP1 :                 97 C |  __FPRINTLOOP2 :                 91 C |
 __FPRINTNEXT :                  A5 C |  __FPRINTNOPIXEL :               9E C |
 __FPRINT_VRETURN :              BC C |

     75 symbols
     34 unused symbols

 AS V1.42 Beta [Bld 102] - source file test.asm - page 9 - 7/6/2016 23:19:34


  defined macros:
  ---------------

LRS                                   | VCALL                                
VRETURN                               |

      3 macros

 AS V1.42 Beta [Bld 102] - source file test.asm - page 10 - 7/6/2016 23:19:34


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    369 lines source file
    385 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
