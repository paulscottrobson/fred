 AS V1.42 Beta [Bld 102] - source file fel.asm - page 1 - 7/18/2016 9:03:24


       1/       0 :                     ;****************************************************************************************************************
       2/       0 :                     ;****************************************************************************************************************
       3/       0 :                     ;                                                        
       4/       0 :                     ;                                                FEL-1 Disassembly
       5/       0 :                     ;                                                =================
       6/       0 :                     ;                                                        
       7/       0 :                     ;          Original version by RCA 1974. Recommented and converted by Paul Robson (paul@robsons.org.uk)
       8/       0 :                     ;                                                        
       9/       0 :                     ;       Source provided courtesy of the Hagley Museum and Library from documents on "FRED" developments at
      10/       0 :                     ;     RCA, dated 1974-75; "Fred Folder 1", Acc. 2464, Box 919 described as the "Billie Joe Call" Collection,
      11/       0 :                     ;                      accession no. 2464.54.  Hagley Museum & Library, Wilmington, DE 19807
      12/       0 :                     ;                                                        
      13/       0 :                     ;           Many thanks to their Librarians, especially Lucas Clawson, for reproducing these documents
      14/       0 :                     ;                                 for the 1802 (and related) Processor community.
      15/       0 :                     ;                                                        
      16/       0 :                     ;             The original author is not currently known but may well have been Joseph A. Weisbecker.
      17/       0 :                     ;                                                        
      18/       0 :                     ;                       The source format is for Alfred Arnolds open source "AS" assembler.
      19/       0 :                     ;                                                        
      20/       0 :                     ;               Last updated 17/7/16 removed font data at 300 from source as generated seperately.
      21/       0 :                     ;                                                        
      22/       0 :                     ;****************************************************************************************************************
      23/       0 :                     ;                                                        
      24/       0 :                     ;        These hardware notes should not be viewed as definitive, this information is derived from reading
      25/       0 :                     ;                        the above code. A more detailed document is under consideration.
      26/       0 :                     ;                                                        
      27/       0 :                     ;            EF1 is 1 when a keypad byte is available. It is read from INP 0. There is a shift switch.
      28/       0 :                     ;          I think this is set manually. (Implied). Horizontal resolution is set by a toggle switch. The
      29/       0 :                     ;                            monitor code relies on this being in 'single byte' mode.
      30/       0 :                     ;                                                        
      31/       0 :                     ;                     EF2 and EF3 are external tests. EF2 detects tape stop. EF4 In ? Error ?
      32/       0 :                     ;                                                        
      33/       0 :                     ;                           Port 1 is a device selector. 1 Keypad, 2 TV, 3 Tape Device
      34/       0 :                     ;                     Port 2 for keypad it is set to 0/1 for TV to 0/3, for Tape $20 is read.
      35/       0 :                     ;                   Port 3 is some flags bit 2 (4) is the audio/tape out and bit 0 (1) is run.
      36/       0 :                     ;                                    Port 4 is the external control register.
      37/       0 :                     ;                                    Port 6 is an extension port (in and out)
      38/       0 :                     ;                                                        
      39/       0 :                     ;      Clock Frequency can be derived from the tone code. In BJC notes 04 is 360us. This is 160 + 40 + 40 *4
      40/       0 :                     ;            cycles. Hence it is clocked at 1Mhz. All the products in the table (kc x us) come to 1000
      41/       0 :                     ;                                                        
      42/       0 :                     ;****************************************************************************************************************
      43/       0 :                     ;****************************************************************************************************************
      44/       0 :                     
      45/       0 :                                include felinclude.inc
(1)    1/       0 :                     ;****************************************************************************************************************
(1)    2/       0 :                     ;
(1)    3/       0 :                     ;													1802 Includes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ;****************************************************************************************************************
(1)    6/       0 :                     
(1)    7/       0 :                     	cpu 1802
(1)    8/       0 :                     
(1)    9/       0 : =0H                 r0 = 0 															; register definitions
(1)   10/       0 : =1H                 r1 = 1
(1)   11/       0 : =2H                 r2 = 2
(1)   12/       0 : =3H                 r3 = 3
(1)   13/       0 : =4H                 r4 = 4
(1)   14/       0 : =5H                 r5 = 5
(1)   15/       0 : =6H                 r6 = 6
 AS V1.42 Beta [Bld 102] - source file fel.asm(felinclude.inc) - page 2 - 7/18/2016 9:03:24


(1)   16/       0 : =7H                 r7 = 7
(1)   17/       0 : =8H                 r8 = 8
(1)   18/       0 : =9H                 r9 = 9
(1)   19/       0 : =AH                 ra = 10
(1)   20/       0 : =BH                 rb = 11
(1)   21/       0 : =CH                 rc = 12
(1)   22/       0 : =DH                 rd = 13
(1)   23/       0 : =EH                 re = 14
(1)   24/       0 : =FH                 rf = 15
(1)   25/       0 :                     
(1)   26/       0 : =0H                 keypadPort = 0 													; keypad read (in only)
(1)   27/       0 : =1H                 selectDevice = 1 												; select DMA device (tape 3 tv 2 keypad 1)
(1)   28/       0 : =2H                 controlDevice = 2 												; control of selected device
(1)   29/       0 : =3H                 controlLatch = 3  												; control tape/audio/run mode.
(1)   30/       0 : =4H                 externalControl = 4 											; external control register (used in monitor)
(1)   31/       0 :                     
(1)   32/       0 : =6H                 externalBus = 6 												; external bus (in/out)
(1)   33/       0 :                     
(1)   34/       0 : =700H               screen = 0700h													; screen RAM is here.
(1)   35/       0 :                     
(1)   36/       0 : =1H                 devKeypad = 1 													; device IDs for port 1
(1)   37/       0 : =2H                 devTV = 2
(1)   38/       0 : =3H                 devTape = 3
(1)   39/       0 :                     
(1)   40/       0 : =0H                 cKeyOff = 0 													; controls for keyboard, TV and Tape
(1)   41/       0 : =1H                 cKeyOn = 1 														; for port 2.
(1)   42/       0 : =3H                 cTVOn = 3
(1)   43/       0 : =0H                 cTVOff = 0
(1)   44/       0 : =20H                cTapeRead = 20h
(1)   45/       0 :                     
(1)   46/       0 : =4H                 clSpeakerBit = 4 												; bit 2 is speaker out
(1)   47/       0 : =2H                 clTapeBit = 2 													; bit 1 is tape out
(1)   48/       0 : =1H                 clRunMode = 1 													; bit 0 is run mode
(1)   49/       0 :                     
(1)   50/       0 :                     fel macro 	fw 													; compile FEL-1 instruction in Hi-Low order
(1)   51/       0 :                     	db 	(fw) / 256
(1)   52/       0 :                     	db 	(fw) & 255
(1)   53/       0 :                     	endm
(1)   54/       0 :                     
      46/       0 :                     
      47/       0 :                     start:
      48/       0 : 00                          idl                                                              
      49/       1 : F8 01                       ldi     1                                                        ; Set interrupt, stack
      50/       3 : B1                          phi     r1                                                       ; they are all in Page 1
      51/       4 : B2                          phi     r2                                                       
      52/       5 : B4                          phi     r4                                                       
      53/       6 : B8                          phi     r8                                                       
      54/       7 : F8 19                       ldi     interrupt & 255                                          ; R1 = $119 Interrupt routine
      55/       9 : A1                          plo     r1                                                       
      56/       A : F8 FF                       ldi     stacktop & 255                                           ; R2 = $1FF Stack top
      57/       C : A2                          plo     r2                                                       
      58/       D : F8 3B                       ldi     nextinstruction & 255                                    
      59/       F : A4                          plo     r4                                                       ; R4 = $13B Execute next instruction
      60/      10 : F8 66                       ldi     call02 & 255                                             
      61/      12 : A8                          plo     r8                                                       ; R8 = $166 Call $1nn where nn is next byte
      62/      13 : 90                          ghi     r0                                                       
      63/      14 : B5                          phi     r5                                                       
      64/      15 : F8 84                       ldi     monitor & 255                                            ; R5 = $0B4 "Macro PC"
      65/      17 : A5                          plo     r5                                                       
      66/      18 : D4                          sep     r4                                                       ; go to "Util" in R4
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 3 - 7/18/2016 9:03:24


      67/      19 :                     
      68/      19 :                     ;****************************************************************************************************************
      69/      19 :                     ;                                                        
      70/      19 :                     ;                                                7xxx Instructions
      71/      19 :                     ;                                                        
      72/      19 :                     ;****************************************************************************************************************
      73/      19 :                     
      74/      19 :                     opcode7:
      75/      19 : D8                          sep     r8                                                       ; Fetch A and B from memory
      76/      1A : 73                          db      readabregs & 255                                         
      77/      1B : E6                          sex     r6                                                       ; X points to register X
      78/      1C : 45                          lda     r5                                                       ; fetch low byte
      79/      1D : A3                          plo     r3                                                       ; go there.
      80/      1E :                     ;   
      81/      1E :                     ;   7x1E M(A)->Vx
      82/      1E :                     ;   
      83/      1E : 4A                          lda     ra                                                       ; read M(RA)
      84/      1F : 56                          str     r6                                                       ; save in X
      85/      20 : D4                          sep     r4                                                       
      86/      21 :                     ;   
      87/      21 :                     ;   7x21 M(B)->Vx
      88/      21 :                     ;   
      89/      21 : 4B                          lda     rb                                                       ; read M(RB)
      90/      22 : 56                          str     r6                                                       ; save in X
      91/      23 : D4                          sep     r4                                                       
      92/      24 :                     ;   
      93/      24 :                     ;   7x24 Vx->M(A)
      94/      24 :                     ;   
      95/      24 : 46                          lda     r6                                                       ; get Vx
      96/      25 : 5A                          str     ra                                                       ; write to M(RA)
      97/      26 : D4                          sep     r4                                                       
      98/      27 :                     ;   
      99/      27 :                     ;   7x27 Vx->M(B)
     100/      27 :                     ;   
     101/      27 : 46                          lda     r6                                                       ; get Vx
     102/      28 : 5B                          str     rb                                                       ; write to M(RB)
     103/      29 : D4                          sep     r4                                                       
     104/      2A :                     ;   
     105/      2A :                     ;   7x2A Vx -> A.0
     106/      2A :                     ;   
     107/      2A : F8 11                       ldi     (areg+1) & 255                                           ; point R7 to RA.0
     108/      2C :                     setaddrreg:
     109/      2C : A7                          plo     r7                                                       
     110/      2D : 46                          lda     r6                                                       ; get Vx
     111/      2E : 57                          str     r7                                                       ; write it there.
     112/      2F : D4                          sep     r4                                                       
     113/      30 :                     ;   
     114/      30 :                     ;   7x30 Vx -> A.1
     115/      30 :                     ;   
     116/      30 : F8 10                       ldi     areg & 255                                               ; RA.1 address
     117/      32 : 30 2C                       br      setaddrreg                                               
     118/      34 :                     ;   
     119/      34 :                     ;   7x30 Vx -> B.0
     120/      34 :                     ;   
     121/      34 : F8 13                       ldi     (breg+1) & 255                                           ; RB.0 address
     122/      36 : 30 2C                       br      setaddrreg                                               
     123/      38 :                     ;   
     124/      38 :                     ;   7x38 A.0 -> Vx
     125/      38 :                     ;   
     126/      38 : 8A                          glo     ra                                                       ; RA.0 value
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 4 - 7/18/2016 9:03:24


     127/      39 : 56                          str     r6                                                       ; put in X
     128/      3A : D4                          sep     r4                                                       
     129/      3B :                     ;   
     130/      3B :                     ;   7x3B A.1 -> Vx
     131/      3B :                     ;   
     132/      3B : 9A                          ghi     ra                                                       ; RA.1 value
     133/      3C : 56                          str     r6                                                       ; put in X
     134/      3D : D4                          sep     r4                                                       
     135/      3E :                     ;   
     136/      3E :                     ;   7x3E Shift X left 4
     137/      3E :                     ;   
     138/      3E : D8                          sep     r8                                                       ; Do Vx << 4
     139/      3F : 4D                          db      shiftvxleft4 & 255                                       
     140/      40 : D4                          sep     r4                                                       
     141/      41 :                     ;   
     142/      41 :                     ;   7x41 Shift X Right 4
     143/      41 :                     ;   
     144/      41 : F0                          ldx                                                              ; Read R(X)
     145/      42 : F6                          shr                                                              
     146/      43 : F6                          shr                                                              
     147/      44 : F6                          shr                                                              
     148/      45 : F6                          shr                                                              
     149/      46 : 56                          str     r6                                                       ; write it back
     150/      47 : F6                          shr                                                              
     151/      48 :                     ;   
     152/      48 :                     ;   7x4B Vx Delay (Tape On, Speaker off)
     153/      48 :                     ;   
     154/      48 : E3                          sex     r3                                                       ; X = P = R3
     155/      49 : 46                          lda     r6                                                       ; read R(X)
     156/      4A : BF                          phi     rf                                                       ; put in RF.0
     157/      4B :                     tapedelayloop:
     158/      4B : 63                          out     controllatch                                             ; tape on, speaker off.
     159/      4C : 03                          db      cltapebit+clrunmode                                      
     160/      4D : 2F                          dec     rf                                                       ; dec counter
     161/      4E : 9F                          ghi     rf                                                       ; timed out
     162/      4F : 3A 4B                       bnz     tapedelayloop                                            ; keep going.
     163/      51 : D4                          sep     r4                                                       
     164/      52 :                     ;   
     165/      52 :                     ;   7x52 Convert Vx to 3 digit decimal at A,A+1,A+2
     166/      52 :                     ;   
     167/      52 : F0                          ldx                                                              ; get R(X)
     168/      53 : BF                          phi     rf                                                       ; save in RF.1
     169/      54 : F8 14                       ldi     dectable & 255                                           ; point R7 to the 100,10,1
     170/      56 : A7                          plo     r7                                                       
     171/      57 : 2A                          dec     ra                                                       ; predec RA
     172/      58 :                     nextdigit:
     173/      58 : 1A                          inc     ra                                                       ; A to next cell.
     174/      59 : 93                          ghi     r3                                                       ; D = 0
     175/      5A : 5A                          str     ra                                                       ; clear counter
     176/      5B :                     subtractunit:
     177/      5B : 47                          lda     r7                                                       ; read divisor
     178/      5C : 27                          dec     r7                                                       ; unpick it
     179/      5D : F5                          sd                                                               ; subtract from R(X)
     180/      5E : 3B 68                       bnf     borrowoccurred                                           ; if no borrow then division complete
     181/      60 : 56                          str     r6                                                       ; write it back to R(X)
     182/      61 : 4A                          lda     ra                                                       ; read counter of divisions
     183/      62 : 2A                          dec     ra                                                       ; undo inc
     184/      63 : FC 01                       adi     01                                                       ; inc counter
     185/      65 : 5A                          str     ra                                                       ; write back
     186/      66 : 30 5B                       br      subtractunit                                             ; try to deduct it again.
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 5 - 7/18/2016 9:03:24


     187/      68 :                     borrowoccurred:
     188/      68 : 47                          lda     r7                                                       ; get R7 - divider just done and inc R7 to next
     189/      69 : F6                          shr                                                              ; shift it right
     190/      6A : 3B 58                       bnf     nextdigit                                                ; until found the 1, i.e. have done 1
     191/      6C : 9F                          ghi     rf                                                       ; fix up R6 back
     192/      6D : 56                          str     r6                                                       
     193/      6E : D4                          sep     r4                                                       
     194/      6F :                     ;   
     195/      6F :                     ;   7F6F INC A. Must use 7F6F so R6 points to VF, the byte before A
     196/      6F :                     ;   
     197/      6F : 1A                          inc     ra                                                       ; increment RA
     198/      70 : 16                          inc     r6                                                       ; R6 now points to RA
     199/      71 : 9A                          ghi     ra                                                       ; write it back.
     200/      72 : 56                          str     r6                                                       
     201/      73 : 16                          inc     r6                                                       
     202/      74 : 8A                          glo     ra                                                       
     203/      75 : 56                          str     r6                                                       
     204/      76 : D4                          sep     r4                                                       
     205/      77 : 00                          db      00                                                       
     206/      78 :                     
     207/      78 :                     ;****************************************************************************************************************
     208/      78 :                     ;                                                        
     209/      78 :                     ;                                              Clear Screen Routine
     210/      78 :                     ;                                                        
     211/      78 :                     ;****************************************************************************************************************
     212/      78 :                     
     213/      78 : 93                          ghi     r3                                                       ; RA = $800 (R3.1 = 0)
     214/      79 : AA                          plo     ra                                                       
     215/      7A : F8 08                       ldi     (screen / 256) + 1                                       
     216/      7C : BA                          phi     ra                                                       
     217/      7D :                     clsloop:
     218/      7D : 2A                          dec     ra                                                       ; dec RA
     219/      7E : 93                          ghi     r3                                                       ; D = 0
     220/      7F : 5A                          str     ra                                                       ; clear screen space
     221/      80 : 8A                          glo     ra                                                       ; check RA.0
     222/      81 : 3A 7D                       bnz     clsloop                                                  ; go back if not finished
     223/      83 : D4                          sep     r4                                                       ; next instruction.
     224/      84 :                     
     225/      84 :                     ;****************************************************************************************************************
     226/      84 :                     ;                                                        
     227/      84 :                     ;                                  This is the FEL-1 Boot Code / Micro monitor.
     228/      84 :                     ;                                                        
     229/      84 :                     ;****************************************************************************************************************
     230/      84 :                     
     231/      84 :                     monitor:
     232/      84 : (MACRO)                     fel     06000h                                                   ; stop tape
     232/      84 : 60                          db      (06000H) / 256
     232/      85 : 00                          db      (06000H) & 255
     233/      86 : (MACRO)                     fel     0022fh                                                   ; copy registers to stack space.
     233/      86 : 02                          db      (0022FH) / 256
     233/      87 : 2F                          db      (0022FH) & 255
     234/      88 :                     ;   
     235/      88 :                     ;   Read key 0 for Run, C for Write, A for Read Mem, B for Write Mem
     236/      88 :                     ;   
     237/      88 : (MACRO)                     fel     0e17ah                                                   ; read Byte into V1
     237/      88 : E1                          db      (0E17AH) / 256
     237/      89 : 7A                          db      (0E17AH) & 255
     238/      8A : (MACRO)                     fel     03100h                                                   ; skip next instruction if not 00
     238/      8A : 31                          db      (03100H) / 256
     238/      8B : 00                          db      (03100H) & 255
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 6 - 7/18/2016 9:03:24


     239/      8C : (MACRO)                     fel     0f400h                                                   ; if was 00, then run program from 400
     239/      8C : F4                          db      (0F400H) / 256
     239/      8D : 00                          db      (0F400H) & 255
     240/      8E : (MACRO)                     fel     0310ch                                                   ; if was 0C, then go to write code
     240/      8E : 31                          db      (0310CH) / 256
     240/      8F : 0C                          db      (0310CH) & 255
     241/      90 : (MACRO)                     fel     0f000h+felwritetape                                      
     241/      90 : F0                          db      (0F000H+FELWRITETAPE) / 256
     241/      91 : CA                          db      (0F000H+FELWRITETAPE) & 255
     242/      92 :                     ;   
     243/      92 :                     ;   Read three keystrokes into A
     244/      92 :                     ;   
     245/      92 : (MACRO)                     fel     0025ch                                                   ; turn television on.
     245/      92 : 02                          db      (0025CH) / 256
     245/      93 : 5C                          db      (0025CH) & 255
     246/      94 : (MACRO)                     fel     00078h                                                   ; clear screen memory
     246/      94 : 00                          db      (00078H) / 256
     246/      95 : 78                          db      (00078H) & 255
     247/      96 : (MACRO)                     fel     0e27ah                                                   ; read byte to V2 (high address nibble)
     247/      96 : E2                          db      (0E27AH) / 256
     247/      97 : 7A                          db      (0E27AH) & 255
     248/      98 : (MACRO)                     fel     07230h                                                   ; write to MSB of A
     248/      98 : 72                          db      (07230H) / 256
     248/      99 : 30                          db      (07230H) & 255
     249/      9A : (MACRO)                     fel     0e27ah                                                   ; read byte to V2 (middle address nibble)
     249/      9A : E2                          db      (0E27AH) / 256
     249/      9B : 7A                          db      (0E27AH) & 255
     250/      9C : (MACRO)                     fel     0e37ah                                                   ; read byte to V3 (low address nibble)
     250/      9C : E3                          db      (0E37AH) / 256
     250/      9D : 7A                          db      (0E37AH) & 255
     251/      9E : (MACRO)                     fel     01000h+felpack                                           ; call pack V2/V3 to V2
     251/      9E : 10                          db      (01000H+FELPACK) / 256
     251/      9F : E2                          db      (01000H+FELPACK) & 255
     252/      A0 : (MACRO)                     fel     0722ah                                                   ; write to LSB of A
     252/      A0 : 72                          db      (0722AH) / 256
     252/      A1 : 2A                          db      (0722AH) & 255
     253/      A2 : (MACRO)                     fel     02900h                                                   ; Clear V9
     253/      A2 : 29                          db      (02900H) / 256
     253/      A3 : 00                          db      (02900H) & 255
     254/      A4 :                     ;   
     255/      A4 :                     ;   Display Address
     256/      A4 :                     ;   
     257/      A4 :                     feldisplay:
     258/      A4 : (MACRO)                     fel     0723bh                                                   ; MSB of A to V2
     258/      A4 : 72                          db      (0723BH) / 256
     258/      A5 : 3B                          db      (0723BH) & 255
     259/      A6 : (MACRO)                     fel     02409h                                                   ; Set V4 = (1,1)
     259/      A6 : 24                          db      (02409H) / 256
     259/      A7 : 09                          db      (02409H) & 255
     260/      A8 : (MACRO)                     fel     01000h+felshow                                           ; unpack and show V2
     260/      A8 : 10                          db      (01000H+FELSHOW) / 256
     260/      A9 : E8                          db      (01000H+FELSHOW) & 255
     261/      AA : (MACRO)                     fel     07238h                                                   ; LSB of A to V2
     261/      AA : 72                          db      (07238H) / 256
     261/      AB : 38                          db      (07238H) & 255
     262/      AC : (MACRO)                     fel     0240bh                                                   ; Set V4 = (3,1)
     262/      AC : 24                          db      (0240BH) / 256
     262/      AD : 0B                          db      (0240BH) & 255
     263/      AE : (MACRO)                     fel     01000h+felshow                                           ; unpack and show V2
     263/      AE : 10                          db      (01000H+FELSHOW) / 256
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 7 - 7/18/2016 9:03:24


     263/      AF : E8                          db      (01000H+FELSHOW) & 255
     264/      B0 :                     ;   
     265/      B0 :                     ;   Display Data
     266/      B0 :                     ;   
     267/      B0 : (MACRO)                     fel     0721eh                                                   ; read contents of Memory(A) to V2
     267/      B0 : 72                          db      (0721EH) / 256
     267/      B1 : 1E                          db      (0721EH) & 255
     268/      B2 : (MACRO)                     fel     02416h                                                   ; Set V4 = (6,2)
     268/      B2 : 24                          db      (02416H) / 256
     268/      B3 : 16                          db      (02416H) & 255
     269/      B4 : (MACRO)                     fel     01000h+felshow                                           ; unpack and show V2
     269/      B4 : 10                          db      (01000H+FELSHOW) / 256
     269/      B5 : E8                          db      (01000H+FELSHOW) & 255
     270/      B6 :                     ;   
     271/      B6 :                     ;   First time around, increment A to point to next cell, second time around go back to the display address code.
     272/      B6 :                     ;   
     273/      B6 : (MACRO)                     fel     03901h                                                   ; increment A if V9 != 0 (not first time)
     273/      B6 : 39                          db      (03901H) / 256
     273/      B7 : 01                          db      (03901H) & 255
     274/      B8 : (MACRO)                     fel     07f6fh                                                   
     274/      B8 : 7F                          db      (07F6FH) / 256
     274/      B9 : 6F                          db      (07F6FH) & 255
     275/      BA : (MACRO)                     fel     0e27ah                                                   ; get hex key (upper nibble)
     275/      BA : E2                          db      (0E27AH) / 256
     275/      BB : 7A                          db      (0E27AH) & 255
     276/      BC : (MACRO)                     fel     02901h                                                   ; set V9 = 1 so increments next time
     276/      BC : 29                          db      (02901H) / 256
     276/      BD : 01                          db      (02901H) & 255
     277/      BE : (MACRO)                     fel     0310ah                                                   ; been round twice ?
     277/      BE : 31                          db      (0310AH) / 256
     277/      BF : 0A                          db      (0310AH) & 255
     278/      C0 : (MACRO)                     fel     0f000h+feldisplay                                        ; if command was A (read) do next w/o update
     278/      C0 : F0                          db      (0F000H+FELDISPLAY) / 256
     278/      C1 : A4                          db      (0F000H+FELDISPLAY) & 255
     279/      C2 : (MACRO)                     fel     0e37ah                                                   ; get the low nibble
     279/      C2 : E3                          db      (0E37AH) / 256
     279/      C3 : 7A                          db      (0E37AH) & 255
     280/      C4 : (MACRO)                     fel     010e2h                                                   ; call pack V2/V3 to V2
     280/      C4 : 10                          db      (010E2H) / 256
     280/      C5 : E2                          db      (010E2H) & 255
     281/      C6 : (MACRO)                     fel     07224h                                                   ; store V(2) at M->A (e.g. new address)
     281/      C6 : 72                          db      (07224H) / 256
     281/      C7 : 24                          db      (07224H) & 255
     282/      C8 : (MACRO)                     fel     0f000h+feldisplay                                        ; redisplay address and data.
     282/      C8 : F0                          db      (0F000H+FELDISPLAY) / 256
     282/      C9 : A4                          db      (0F000H+FELDISPLAY) & 255
     283/      CA :                     ;   
     284/      CA :                     ;   Write code to tape
     285/      CA :                     ;   
     286/      CA :                     felwritetape:
     287/      CA : (MACRO)                     fel     00268h                                                   ; disable hex keyboard input
     287/      CA : 02                          db      (00268H) / 256
     287/      CB : 68                          db      (00268H) & 255
     288/      CC : (MACRO)                     fel     021ffh                                                   ; set V1 = $FF (5 sec approx)
     288/      CC : 21                          db      (021FFH) / 256
     288/      CD : FF                          db      (021FFH) & 255
     289/      CE : (MACRO)                     fel     07148h                                                   ; delay of this length so stabilises
     289/      CE : 71                          db      (07148H) / 256
     289/      CF : 48                          db      (07148H) & 255
     290/      D0 : (MACRO)                     fel     02140h                                                   ; set V1 = $40 (1 sec approx)
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 8 - 7/18/2016 9:03:24


     290/      D0 : 21                          db      (02140H) / 256
     290/      D1 : 40                          db      (02140H) & 255
     291/      D2 : (MACRO)                     fel     07148h                                                   ; more delay
     291/      D2 : 71                          db      (07148H) / 256
     291/      D3 : 48                          db      (07148H) & 255
     292/      D4 : (MACRO)                     fel     0d210h                                                   ; tone and delay
     292/      D4 : D2                          db      (0D210H) / 256
     292/      D5 : 10                          db      (0D210H) & 255
     293/      D6 : (MACRO)                     fel     07148h                                                   ; delay with that tone (start tone ?)
     293/      D6 : 71                          db      (07148H) / 256
     293/      D7 : 48                          db      (07148H) & 255
     294/      D8 : (MACRO)                     fel     0a000h                                                   ; A = 0
     294/      D8 : A0                          db      (0A000H) / 256
     294/      D9 : 00                          db      (0A000H) & 255
     295/      DA : (MACRO)                     fel     0f000h+felnext                                           ; (patched out)
     295/      DA : F0                          db      (0F000H+FELNEXT) / 256
     295/      DB : DC                          db      (0F000H+FELNEXT) & 255
     296/      DC :                     felnext:
     297/      DC : (MACRO)                     fel     0e3a0h                                                   ; write tape M(A) to end
     297/      DC : E3                          db      (0E3A0H) / 256
     297/      DD : A0                          db      (0E3A0H) & 255
     298/      DE : (MACRO)                     fel     0d210h                                                   ; tone and delay
     298/      DE : D2                          db      (0D210H) / 256
     298/      DF : 10                          db      (0D210H) & 255
     299/      E0 :                     felstop:
     300/      E0 : (MACRO)                     fel     0f000h+felstop                                           ; stop
     300/      E0 : F0                          db      (0F000H+FELSTOP) / 256
     300/      E1 : E0                          db      (0F000H+FELSTOP) & 255
     301/      E2 :                     ;   
     302/      E2 :                     ;   Pack V2/V3 nibbles into a single byte (subroutine)
     303/      E2 :                     ;   
     304/      E2 :                     felpack:
     305/      E2 : (MACRO)                     fel     0723eh                                                   ; Shift V2 left 4 bits
     305/      E2 : 72                          db      (0723EH) / 256
     305/      E3 : 3E                          db      (0723EH) & 255
     306/      E4 : (MACRO)                     fel     08231h                                                   ; V2 = V2 or V3
     306/      E4 : 82                          db      (08231H) / 256
     306/      E5 : 31                          db      (08231H) & 255
     307/      E6 : (MACRO)                     fel     0026eh                                                   ; return
     307/      E6 : 02                          db      (0026EH) / 256
     307/      E7 : 6E                          db      (0026EH) & 255
     308/      E8 :                     ;   
     309/      E8 :                     ;   Unpack V2 into 2 digits and display at V4 (subroutine)
     310/      E8 :                     ;   
     311/      E8 :                     felshow:
     312/      E8 : (MACRO)                     fel     0b300h                                                   ; point B to $300
     312/      E8 : B3                          db      (0B300H) / 256
     312/      E9 : 00                          db      (0B300H) & 255
     313/      EA : (MACRO)                     fel     0230fh                                                   ; V3 = 0Fh
     313/      EA : 23                          db      (0230FH) / 256
     313/      EB : 0F                          db      (0230FH) & 255
     314/      EC : (MACRO)                     fel     08322h                                                   ; And out lowest nibble into V3
     314/      EC : 83                          db      (08322H) / 256
     314/      ED : 22                          db      (08322H) & 255
     315/      EE : (MACRO)                     fel     07241h                                                   ; Shift V2 right 4, now has highest nibble
     315/      EE : 72                          db      (07241H) / 256
     315/      EF : 41                          db      (07241H) & 255
     316/      F0 : (MACRO)                     fel     07334h                                                   ; B = $03<low>
     316/      F0 : 73                          db      (07334H) / 256
     316/      F1 : 34                          db      (07334H) & 255
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 9 - 7/18/2016 9:03:24


     317/      F2 : (MACRO)                     fel     07321h                                                   ; Read Mem(B) -> V3, addr of gfx data
     317/      F2 : 73                          db      (07321H) / 256
     317/      F3 : 21                          db      (07321H) & 255
     318/      F4 : (MACRO)                     fel     09345h                                                   ; Draw V3 pattern at cell V4
     318/      F4 : 93                          db      (09345H) / 256
     318/      F5 : 45                          db      (09345H) & 255
     319/      F6 : (MACRO)                     fel     054ffh                                                   ; point to previous cell
     319/      F6 : 54                          db      (054FFH) / 256
     319/      F7 : FF                          db      (054FFH) & 255
     320/      F8 : (MACRO)                     fel     07234h                                                   ; B = $03<high>
     320/      F8 : 72                          db      (07234H) / 256
     320/      F9 : 34                          db      (07234H) & 255
     321/      FA : (MACRO)                     fel     07221h                                                   ; Read Mem(B) -> V2, addr of gfx data
     321/      FA : 72                          db      (07221H) / 256
     321/      FB : 21                          db      (07221H) & 255
     322/      FC : (MACRO)                     fel     09245h                                                   ; Draw V2 pattern at cell V4
     322/      FC : 92                          db      (09245H) / 256
     322/      FD : 45                          db      (09245H) & 255
     323/      FE : (MACRO)                     fel     0026eh                                                   ; return
     323/      FE : 02                          db      (0026EH) / 256
     323/      FF : 6E                          db      (0026EH) & 255
     324/     100 :                     
     325/     100 :                     ;****************************************************************************************************************
     326/     100 :                     ;                                                        
     327/     100 :                     ;                                       Register Area and Conversion table
     328/     100 :                     ;                                                        
     329/     100 :                     ;****************************************************************************************************************
     330/     100 :                     
     331/     100 :                     registers:
     332/     100 : 00 00 00 00                 db      0,0,0,0                                                  ; V0-VF
     333/     104 : 00 00 00 00                 db      0,0,0,0                                                  
     334/     108 : 00 00 00 00                 db      0,0,0,0                                                  
     335/     10C : 00 00 00 00                 db      0,0,0,0                                                  
     336/     110 :                     areg:
     337/     110 : 00 00                       db      0,0                                                      ; A
     338/     112 :                     breg:
     339/     112 : 00 00                       db      0,0                                                      ; B
     340/     114 :                     
     341/     114 :                     dectable:
     342/     114 : 64                          db      100                                                      ; dividers.
     343/     115 : 0A                          db      10                                                       
     344/     116 : 01                          db      1                                                        
     345/     117 :                     
     346/     117 :                     ;****************************************************************************************************************
     347/     117 :                     ;                                                        
     348/     117 :                     ;                                               Interrupt Routine.
     349/     117 :                     ;                   Sets up R0 to point to display at $700 and decrements VD,VE,VF if non-zero.
     350/     117 :                     ;                                                        
     351/     117 :                     ;****************************************************************************************************************
     352/     117 :                     
     353/     117 :                     exitinterrupt:
     354/     117 : 42                          lda     r2                                                       ; pop D off the stack
     355/     118 : 70                          ret                                                              ; return re-enabling interrupts.
     356/     119 :                     interrupt:
     357/     119 : 22                          dec     r2                                                       ; save T on Stack
     358/     11A : 78                          sav                                                              
     359/     11B : 22                          dec     r2                                                       ; save D on Stack
     360/     11C : 52                          str     r2                                                       ; Save on stack.
     361/     11D :                     
     362/     11D : F8 07                       ldi     screen/256                                               ; set R0 (display pointer) to $700
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 10 - 7/18/2016 9:03:24


     363/     11F : B0                          phi     r0                                                       
     364/     120 : F8 00                       ldi     screen&255                                               
     365/     122 : A0                          plo     r0                                                       
     366/     123 :                     
     367/     123 : 19                          inc     r9                                                       ; increment R9 (timer ?)
     368/     124 :                     
     369/     124 : 86                          glo     r6                                                       ; get R6
     370/     125 : BD                          phi     rd                                                       ; save in RD.1
     371/     126 :                     
     372/     126 : F8 0D                       ldi     (registers + 0dh) & 255                                  ; point to Vd
     373/     128 : A6                          plo     r6                                                       
     374/     129 :                     timerupdateloop:
     375/     129 : 46                          lda     r6                                                       ; read R6 (VD Timer first time around)
     376/     12A : 26                          dec     r6                                                       ; fix up R6
     377/     12B : 32 31                       bz      nexttimer                                                
     378/     12D : AD                          plo     rd                                                       ; save in RD.0
     379/     12E : 2D                          dec     rd                                                       ; decrement it (so we don't change DF)
     380/     12F : 8D                          glo     rd                                                       ; recover it
     381/     130 : 56                          str     r6                                                       ; save timer now updated
     382/     131 :                     nexttimer:
     383/     131 : 16                          inc     r6                                                       ; point to next timer
     384/     132 : 86                          glo     r6                                                       ; get low byte
     385/     133 : FB 10                       xri     (registers+10h) & 255                                    ; done all timers
     386/     135 : 3A 29                       bnz     timerupdateloop                                          ; if not, go back round again.
     387/     137 : 9D                          ghi     rd                                                       ; get RD.1, fix R6 back up again.
     388/     138 : A6                          plo     r6                                                       
     389/     139 : 30 17                       br      exitinterrupt                                            ; and go back to exit the routine.
     390/     13B :                     
     391/     13B :                     ;****************************************************************************************************************
     392/     13B :                     ;                                                        
     393/     13B :                     ;            Main execution loop, run in R4. Sets up R6 (X) R7 (Y) and calls code from table at 01C0h
     394/     13B :                     ;                                                        
     395/     13B :                     ;****************************************************************************************************************
     396/     13B :                     
     397/     13B :                     nextinstruction:
     398/     13B : 94                          ghi     r4                                                       ; D = 1
     399/     13C : B6                          phi     r6                                                       ; Set R6,R7,RC High to Page 1.
     400/     13D : B7                          phi     r7                                                       
     401/     13E : BC                          phi     rc                                                       
     402/     13F :                     
     403/     13F : 45                          lda     r5                                                       ; Read R5 (instruction High)
     404/     140 : AC                          plo     rc                                                       ; Save in RC.0
     405/     141 : FA 0F                       ani     0fh                                                      ; get the X register number
     406/     143 : A6                          plo     r6                                                       ; R6 now points to Register X.
     407/     144 :                     
     408/     144 : 8C                          glo     rc                                                       ; get the instruction High
     409/     145 : F6                          shr                                                              ; shift right four times.
     410/     146 : F6                          shr                                                              
     411/     147 : F6                          shr                                                              
     412/     148 : F6                          shr                                                              ; instruction code in D
     413/     149 : 32 60                       bz      opcode0                                                  ; if zero, its a machine language
     414/     14B : F9 C0                       ori     instructionvector & 255                                  ; OR with $C0
     415/     14D : AC                          plo     rc                                                       ; Put in RC.0  now points to vector table
     416/     14E :                     
     417/     14E : 45                          lda     r5                                                       ; Read low byte of instruction
     418/     14F : 25                          dec     r5                                                       ; Point it back to R5
     419/     150 : F6                          shr                                                              ; shift right four times
     420/     151 : F6                          shr                                                              
     421/     152 : F6                          shr                                                              
     422/     153 : F6                          shr                                                              ; D now contains the Y register number
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 11 - 7/18/2016 9:03:24


     423/     154 : A7                          plo     r7                                                       ; R7 now points to Register Y.
     424/     155 :                     
     425/     155 : 4C                          lda     rc                                                       ; Read High byte of program
     426/     156 : B3                          phi     r3                                                       ; save in R3.1
     427/     157 : 8C                          glo     rc                                                       ; get low byte of RC
     428/     158 : FC 0F                       adi     0fh                                                      ; point to low address (+1 already)
     429/     15A : AC                          plo     rc                                                       ; write it back
     430/     15B : 4C                          lda     rc                                                       ; get low byte of address
     431/     15C :                     execr3:
     432/     15C : A3                          plo     r3                                                       ; save in R3.0, now has code address
     433/     15D : D3                          sep     r3                                                       ; and call it
     434/     15E : 30 3B                       br      nextinstruction                                          ; make re-entrant
     435/     160 :                     
     436/     160 :                     ;****************************************************************************************************************
     437/     160 :                     ;                                                        
     438/     160 :                     ;                                       0aaa run machine code at aaa in P3.
     439/     160 :                     ;                                                        
     440/     160 :                     ;****************************************************************************************************************
     441/     160 :                     
     442/     160 :                     opcode0:
     443/     160 : 86                          glo     r6                                                       ; get R6.0 (Hi)
     444/     161 : B3                          phi     r3                                                       ; put in R3.1
     445/     162 : 45                          lda     r5                                                       ; read instruction second byte.
     446/     163 : 30 5C                       br      execr3                                                   
     447/     165 :                     ;   
     448/     165 :                     ;   R8 points here. Calls the $02 <next byte> running in RC.
     449/     165 :                     ;   
     450/     165 :                     exit02call:
     451/     165 : DC                          sep     rc                                                       ; return.
     452/     166 :                     call02:
     453/     166 : 43                          lda     r3                                                       ; read next byte in code
     454/     167 : AC                          plo     rc                                                       ; save in RC.0
     455/     168 : F8 02                       ldi     02                                                       ; put 2xx in RC
     456/     16A : BC                          phi     rc                                                       
     457/     16B : 30 65                       br      exit02call                                               ; and call it, making it re-entrant
     458/     16D :                     ;   
     459/     16D :                     ;   R8 routines to return RF.1, RF.0.
     460/     16D :                     ;   
     461/     16D :                     exitghirf:
     462/     16D : DC                          sep     rc                                                       ; get RF.1
     463/     16E :                     ghirf:
     464/     16E : 9F                          ghi     rf                                                       
     465/     16F : 30 6D                       br      exitghirf                                                
     466/     171 :                     ;   
     467/     171 :                     exitglorf:
     468/     171 : DC                          sep     rc                                                       ; get RF.0
     469/     172 :                     glorf:
     470/     172 : 8F                          glo     rf                                                       
     471/     173 : 30 71                       br      exitglorf                                                
     472/     175 :                     
     473/     175 :                     ;****************************************************************************************************************
     474/     175 :                     ;                                                        
     475/     175 :                     ;                                     Exaa - execute code at 01aa with X = 6
     476/     175 :                     ;                                                        
     477/     175 :                     ;****************************************************************************************************************
     478/     175 :                     
     479/     175 :                     instructione:
     480/     175 : D8                          sep     r8                                                       ; load A and B into RA and RB
     481/     176 : 73                          db      readabregs & 255                                         
     482/     177 : E6                          sex     r6                                                       ; index is Vx
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 12 - 7/18/2016 9:03:24


     483/     178 : 45                          lda     r5                                                       ; get the 2nd instruction byte
     484/     179 : A3                          plo     r3                                                       ; and go there, jump indirect.
     485/     17A :                     ;   
     486/     17A :                     ;   Ex7A . Hex keypad on, wait for byte
     487/     17A :                     ;   
     488/     17A : D8                          sep     r8                                                       ; call hex keypad on at $0246
     489/     17B : 46                          db      keypadon & 255                                           
     490/     17C :                     waitkeypress:
     491/     17C : 3C 7C                       bn1     waitkeypress                                             ; wait for EF1 (byte ready)
     492/     17E :                     readkeyinput:
     493/     17E : 68                          db      68h+keypadport                                           ; read to M(X) (AS Cannot assemble INP0)
     494/     17F : D4                          sep     r4                                                       
     495/     180 :                     ;   
     496/     180 :                     ;   Ex80 . Hex keypad on, byte ready input else skip
     497/     180 :                     ;   
     498/     180 : D8                          sep     r8                                                       ; call hex keypad on at $0246
     499/     181 : 46                          db      keypadon & 255                                           
     500/     182 : 34 7E                       b1      readkeyinput                                             ; if byte ready get it.
     501/     184 :                     skipinstruction:
     502/     184 : 15                          inc     r5                                                       ; skip instruction
     503/     185 : 15                          inc     r5                                                       
     504/     186 : D4                          sep     r4                                                       
     505/     187 :                     ;   
     506/     187 :                     ;   Ex87 - EF2 Skip
     507/     187 :                     ;   
     508/     187 : 35 84                       b2      skipinstruction                                          ; skip if  EF2
     509/     189 : D4                          sep     r4                                                       
     510/     18A :                     ;   
     511/     18A :                     ;   Ex8A - EF3 Skip
     512/     18A :                     ;   
     513/     18A : 36 84                       b3      skipinstruction                                          ; skip if EF3
     514/     18C : D4                          sep     r4                                                       
     515/     18D :                     ;   
     516/     18D :                     ;   Ex8D - Ext Bus to Vx
     517/     18D :                     ;   
     518/     18D : 6E                          inp     externalbus                                              ; read port 6 input.
     519/     18E : D4                          sep     r4                                                       
     520/     18F :                     ;   
     521/     18F :                     ;   Ex8F - Vx to Ext Bus
     522/     18F :                     ;   
     523/     18F : 66                          out     externalbus                                              ; out to port 6
     524/     190 : D4                          sep     r4                                                       
     525/     191 :                     ;   
     526/     191 :                     ;   Ex91 - Write Vx to External Control Register
     527/     191 :                     ;   
     528/     191 : 64                          out     externalcontrol                                          ; external control register
     529/     192 : D4                          sep     r4                                                       
     530/     193 :                     ;   
     531/     193 :                     ;   E093 - Read tape -> M(A) concurrent using DMA Off. Need to turn TV off and Start tape before.
     532/     193 :                     ;   to check tape end read check EF2.
     533/     193 :                     ;   
     534/     193 : 9A                          ghi     ra                                                       ; put RA in R0
     535/     194 : B0                          phi     r0                                                       
     536/     195 : 8A                          glo     ra                                                       
     537/     196 : A0                          plo     r0                                                       
     538/     197 : E3                          sex     r3                                                       ; X = P = 3
     539/     198 : 61                          out     selectdevice                                             ; select tape
     540/     199 : 03                          db      devtape                                                  
     541/     19A : 62                          out     controldevice                                            ; tape read
     542/     19B : 20                          db      ctaperead                                                
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 13 - 7/18/2016 9:03:24


     543/     19C : D4                          sep     r4                                                       
     544/     19D :                     ;   
     545/     19D :                     ;   R1(0)  -> Vx
     546/     19D :                     ;   
     547/     19D : 90                          ghi     r0                                                       
     548/     19E : 56                          str     r6                                                       
     549/     19F : D4                          sep     r4                                                       
     550/     1A0 :                     ;   
     551/     1A0 :                     ;   E3A0 - Write tape from M(A) to M(06FF). Need to turn TV off and start tape before.
     552/     1A0 :                     ;   
     553/     1A0 : 86                          glo     r6                                                       ; read 3  (why E3A0)
     554/     1A1 : BE                          phi     re                                                       
     555/     1A2 :                     tapebyteoutloop:
     556/     1A2 : 93                          ghi     r3                                                       ; get R3.1 which is 1 (we are in R3)
     557/     1A3 : F6                          shr                                                              ; set DF = 1 D = 0. DF set for writing start
     558/     1A4 : AB                          plo     rb                                                       ; save in RB.0 (parity)
     559/     1A5 : F8 08                       ldi     8                                                        ; bits to do.
     560/     1A7 : AE                          plo     re                                                       ; save in RE.0
     561/     1A8 : 4A                          lda     ra                                                       ; read next byte
     562/     1A9 : BB                          phi     rb                                                       ; save in RB.0
     563/     1AA : D8                          sep     r8                                                       ; write start bit
     564/     1AB : 85                          db      writetapedelay & 255                                     
     565/     1AC :                     tapebitoutloop:
     566/     1AC : 9B                          ghi     rb                                                       ; get the byte value
     567/     1AD : F6                          shr                                                              ; put LSB in DF
     568/     1AE : BB                          phi     rb                                                       ; write it back
     569/     1AF : DC                          sep     rc                                                       ; write out DF 0/1.
     570/     1B0 : 2E                          dec     re                                                       ; decrement bit counter
     571/     1B1 : 8E                          glo     re                                                       ; if non zero go back and do next bit.
     572/     1B2 : 3A AC                       bnz     tapebitoutloop                                           
     573/     1B4 : 8B                          glo     rb                                                       ; get the parity count
     574/     1B5 : F6                          shr                                                              ; shift into DF
     575/     1B6 : DC                          sep     rc                                                       ; write that parity bit out
     576/     1B7 : 8A                          glo     ra                                                       ; check done whole page
     577/     1B8 : 3A A2                       bnz     tapebyteoutloop                                          ; if not keep going
     578/     1BA : 9A                          ghi     ra                                                       ; done to $0700 ($06FF last)
     579/     1BB : FB 07                       xri     7                                                        ; (700 is video ram)
     580/     1BD : 3A A2                       bnz     tapebyteoutloop                                          ; if not keep going
     581/     1BF : D4                          sep     r4                                                       
     582/     1C0 :                     
     583/     1C0 :                     ;****************************************************************************************************************
     584/     1C0 :                     ;                                                        
     585/     1C0 :                     ;                                            Instruction vector tables
     586/     1C0 :                     ;                                                        
     587/     1C0 :                     ;****************************************************************************************************************
     588/     1C0 :                     
     589/     1C0 :                     instructionvector:
     590/     1C0 : 00                          db      0                                                        ; 0xxx not decoded here
     591/     1C1 : 02                          db      opcode1 / 256                                            ; 1mmm Do program at mmm (subroutine call)
     592/     1C2 : 02                          db      opcode2 / 256                                            ; 2xkk Load kk into Vx
     593/     1C3 : 02                          db      opcode3 / 256                                            ; 3xkk Skip if Vx != kk
     594/     1C4 : 02                          db      opcode4 / 256                                            ; 4xkk Vx = Random Number & kk
     595/     1C5 : 02                          db      opcode5 / 256                                            ; 5xkk Vx = Vx + kk,skip if vx = 0
     596/     1C6 : 02                          db      opcode6 / 256                                            ; 6xxx Assorted
     597/     1C7 : 00                          db      opcode7 / 256                                            ; 7xnn Assorted
     598/     1C8 : 02                          db      opcode8 / 256                                            ; 8xyf Arithmetic
     599/     1C9 : 02                          db      opcode9 / 256                                            ; 9xys Display pattern
     600/     1CA : 02                          db      instructiona / 256                                       ; Ammm Load A immediate
     601/     1CB : 02                          db      instructionb / 256                                       ; Bmmm Load B immediate
     602/     1CC : 02                          db      instructionc / 256                                       ; Cxy0 Skip if vx != vy
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 14 - 7/18/2016 9:03:24


     603/     1CD : 02                          db      instructiond / 256                                       ; Dxy0 Vx Tone, Vy Delay (Tape on spk off)
     604/     1CE : 01                          db      instructione / 256                                       ; Exxx Assorted
     605/     1CF : 02                          db      instructionf / 256                                       ; Fmmm Jump to mmm
     606/     1D0 :                     
     607/     1D0 : 00                          db      0                                                        ; 0aaa is not dispatched this way.
     608/     1D1 :                     
     609/     1D1 : 0D                          db      opcode1 & 255                                            ; instruction tables (low address)
     610/     1D2 : 81                          db      opcode2 & 255                                            
     611/     1D3 : 23                          db      opcode3 & 255                                            
     612/     1D4 : CA                          db      opcode4 & 255                                            
     613/     1D5 : 1A                          db      opcode5 & 255                                            
     614/     1D6 : 58                          db      opcode6 & 255                                            
     615/     1D7 : 19                          db      opcode7 & 255                                            
     616/     1D8 : 99                          db      opcode8 & 255                                            
     617/     1D9 : DD                          db      opcode9 & 255                                            
     618/     1DA : 00                          db      instructiona & 255                                       
     619/     1DB : 09                          db      instructionb & 255                                       
     620/     1DC : 2B                          db      instructionc & 255                                       
     621/     1DD : BE                          db      instructiond & 255                                       
     622/     1DE : 75                          db      instructione & 255                                       
     623/     1DF : 15                          db      instructionf & 255                                       
     624/     1E0 :                     
     625/     1E0 :                     stack:
     626/     1E0 : 00 00 00 00                 db      0,0,0,0                                                  ; stack space
     627/     1E4 : 00 00 00 00                 db      0,0,0,0                                                  
     628/     1E8 : 00 00 00 00                 db      0,0,0,0                                                  
     629/     1EC : 00 00 00 00                 db      0,0,0,0                                                  
     630/     1F0 : 00 00 00 00                 db      0,0,0,0                                                  
     631/     1F4 : 00 00 00 00                 db      0,0,0,0                                                  
     632/     1F8 : 00 00 00 00                 db      0,0,0,0                                                  
     633/     1FC : 00 00 00                    db      0,0,0                                                    
     634/     1FF :                     stacktop:
     635/     1FF : 00                          db      0                                                        
     636/     200 :                     
     637/     200 :                     ;****************************************************************************************************************
     638/     200 :                     ;                                                        
     639/     200 :                     ;                                              Ammm  Load A with mmm
     640/     200 :                     ;                                                        
     641/     200 :                     ;****************************************************************************************************************
     642/     200 :                     
     643/     200 :                     instructiona:
     644/     200 : F8 10                       ldi     areg & 255                                               ; point R7 to A
     645/     202 :                     loadaddrconst:
     646/     202 : A7                          plo     r7                                                       
     647/     203 : 86                          glo     r6                                                       ; get X address $10X so its $0X
     648/     204 : 57                          str     r7                                                       ; write to A high and point to low
     649/     205 : 17                          inc     r7                                                       
     650/     206 : 45                          lda     r5                                                       ; get second byte of instruction
     651/     207 : 57                          str     r7                                                       ; write to low byte
     652/     208 : D4                          sep     r4                                                       
     653/     209 :                     
     654/     209 :                     ;****************************************************************************************************************
     655/     209 :                     ;                                                        
     656/     209 :                     ;                                              Bmmm  Load B with mmm
     657/     209 :                     ;                                                        
     658/     209 :                     ;****************************************************************************************************************
     659/     209 :                     
     660/     209 :                     instructionb:
     661/     209 : F8 12                       ldi     breg & 255                                               ; point R7 to B and reuse code above
     662/     20B : 30 02                       br      loadaddrconst                                            
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 15 - 7/18/2016 9:03:24


     663/     20D :                     
     664/     20D :                     ;****************************************************************************************************************
     665/     20D :                     ;                                                        
     666/     20D :                     ;                                      1mmm Do Program (Subroutine) at mmmm
     667/     20D :                     ;                                                        
     668/     20D :                     ;****************************************************************************************************************
     669/     20D :                     
     670/     20D :                     opcode1:
     671/     20D : 15                          inc     r5                                                       ; r5 point sto next instruction
     672/     20E : 85                          glo     r5                                                       ; get return address low
     673/     20F : 22                          dec     r2                                                       ; push on stack
     674/     210 : 52                          str     r2                                                       
     675/     211 : 95                          ghi     r5                                                       ; get return address high
     676/     212 : 22                          dec     r2                                                       ; push on stack
     677/     213 : 52                          str     r2                                                       
     678/     214 : 25                          dec     r5                                                       ; point R5 to low byte and fall through.
     679/     215 :                     
     680/     215 :                     ;****************************************************************************************************************
     681/     215 :                     ;                                                        
     682/     215 :                     ;                                           Fmmm Go to program at mmmm
     683/     215 :                     ;                                                        
     684/     215 :                     ;****************************************************************************************************************
     685/     215 :                     
     686/     215 :                     instructionf:
     687/     215 : 45                          lda     r5                                                       ; get low byte
     688/     216 : A5                          plo     r5                                                       ; put in FEL PC Low
     689/     217 : 86                          glo     r6                                                       ; get X address $10X so this is $0X
     690/     218 : B5                          phi     r5                                                       ; put in FEL PC hight
     691/     219 : D4                          sep     r4                                                       
     692/     21A :                     
     693/     21A :                     ;****************************************************************************************************************
     694/     21A :                     ;                                                        
     695/     21A :                     ;                                         5xkk add kk to vx, skip if zero
     696/     21A :                     ;                                                        
     697/     21A :                     ;****************************************************************************************************************
     698/     21A :                     
     699/     21A :                     opcode5:
     700/     21A : E6                          sex     r6                                                       ; access VX
     701/     21B : 45                          lda     r5                                                       ; read 2nd byte
     702/     21C : F4                          add                                                              ; add to VX
     703/     21D : 56                          str     r6                                                       ; write back
     704/     21E : 32 28                       bz      skipinstruction2                                         ; if zero skip
     705/     220 : D4                          sep     r4                                                       
     706/     221 : 15                          inc     r5                                                       ; unused
     707/     222 : D4                          sep     r4                                                       ; unused
     708/     223 :                     
     709/     223 :                     ;****************************************************************************************************************
     710/     223 :                     ;                                                        
     711/     223 :                     ;                                       3xkk  Skip instruction if vx != kk
     712/     223 :                     ;                                                        
     713/     223 :                     ;****************************************************************************************************************
     714/     223 :                     
     715/     223 :                     opcode3:
     716/     223 : 45                          lda     r5                                                       ; get kk value
     717/     224 :                     skipifvxnotd:
     718/     224 : E6                          sex     r6                                                       ; R[X] points to Vx
     719/     225 : F3                          xor                                                              ; compare the values
     720/     226 : 32 2A                       bz      dontskip                                                 ; exit if same
     721/     228 :                     skipinstruction2:
     722/     228 : 15                          inc     r5                                                       ; skip
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 16 - 7/18/2016 9:03:24


     723/     229 : 15                          inc     r5                                                       
     724/     22A :                     dontskip:
     725/     22A : D4                          sep     r4                                                       
     726/     22B :                     
     727/     22B :                     ;****************************************************************************************************************
     728/     22B :                     ;                                                        
     729/     22B :                     ;                                             Cxy0  Skip if vx != vy
     730/     22B :                     ;                                                        
     731/     22B :                     ;****************************************************************************************************************
     732/     22B :                     
     733/     22B :                     instructionc:
     734/     22B : 15                          inc     r5                                                       ; ignore second byte
     735/     22C : 47                          lda     r7                                                       ; read Vy
     736/     22D : 30 24                       br      skipifvxnotd                                             ; so now its same as 3xkk
     737/     22F :                     
     738/     22F :                     ;****************************************************************************************************************
     739/     22F :                     ;                                                        
     740/     22F :                     ;                                            Copy Registers onto Stack
     741/     22F :                     ;                                                        
     742/     22F :                     ;****************************************************************************************************************
     743/     22F :                     
     744/     22F : F8 00                       ldi     0                                                        ; point R6 to $100
     745/     231 : A6                          plo     r6                                                       
     746/     232 : 96                          ghi     r6                                                       ; set R7 to $1E0 stack space bottom.
     747/     233 : B7                          phi     r7                                                       
     748/     234 : F8 E0                       ldi     stack & 255                                              
     749/     236 : A7                          plo     r7                                                       
     750/     237 :                     copyregloop:
     751/     237 : 46                          lda     r6                                                       ; read variable data
     752/     238 : 57                          str     r7                                                       ; copy it out.
     753/     239 : 17                          inc     r7                                                       ; next byte
     754/     23A : 87                          glo     r7                                                       
     755/     23B : FB F4                       xri     0f4h                                                     ; copied all 20 bytes of data ?
     756/     23D : 3A 37                       bnz     copyregloop                                              
     757/     23F : D4                          sep     r4                                                       
     758/     240 :                     
     759/     240 :                     ;****************************************************************************************************************
     760/     240 :                     ;                                                        
     761/     240 :                     ;                                            Turn the television off.
     762/     240 :                     ;                                                        
     763/     240 :                     ;****************************************************************************************************************
     764/     240 :                     
     765/     240 : E3                          sex     r3                                                       ; X = 3 (same as P)
     766/     241 : 61                          out     selectdevice                                             ; select TV device (2)
     767/     242 : 02                          db      devtv                                                    
     768/     243 : 62                          out     controldevice                                            ; turn it off
     769/     244 : 00                          db      ctvoff                                                   
     770/     245 : D4                          sep     r4                                                       
     771/     246 :                     
     772/     246 :                     ;****************************************************************************************************************
     773/     246 :                     ;                                                        
     774/     246 :                     ;                                     Turn hex keypad on (probably run in RC)
     775/     246 :                     ;                                                        
     776/     246 :                     ;****************************************************************************************************************
     777/     246 :                     
     778/     246 :                     keypadon:
     779/     246 : EC                          sex     rc                                                       ; X = C
     780/     247 : 61                          out     selectdevice                                             ; select Keypad device (1)
     781/     248 : 01                          db      devkeypad                                                
     782/     249 : 62                          out     controldevice                                            ; turn it on.
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 17 - 7/18/2016 9:03:24


     783/     24A : 01                          db      ckeyon                                                   
     784/     24B : E6                          sex     r6                                                       ; set X back and return.
     785/     24C : D3                          sep     r3                                                       
     786/     24D :                     
     787/     24D :                     ;****************************************************************************************************************
     788/     24D :                     ;                                                        
     789/     24D :                     ;                                                 Shift Vx left 4
     790/     24D :                     ;                                                        
     791/     24D :                     ;****************************************************************************************************************
     792/     24D :                     
     793/     24D :                     shiftvxleft4:
     794/     24D : E6                          sex     r6                                                       ; R(X) now points to Vx
     795/     24E : F0                          ldx                                                              ; get Vx
     796/     24F : F4                          add                                                              ; add it
     797/     250 : 56                          str     r6                                                       ; write back << 1
     798/     251 : F4                          add                                                              ; add it
     799/     252 : 56                          str     r6                                                       ; write back << 2
     800/     253 : F4                          add                                                              ; add it
     801/     254 : 56                          str     r6                                                       ; write back << 3
     802/     255 : F4                          add                                                              ; add it, now << 4
     803/     256 : 56                          str     r6                                                       ; write back to Vx
     804/     257 : D3                          sep     r3                                                       
     805/     258 :                     ;   
     806/     258 :                     ;   Tape Controller - code to write in low part of instruction
     807/     258 :                     ;   
     808/     258 :                     opcode6:
     809/     258 : E5                          sex     r5                                                       ; use R5 as X
     810/     259 : 63                          out     controllatch                                             ; write low byte of instruction to port 3
     811/     25A : D4                          sep     r4                                                       ; return
     812/     25B : 00                          db      0                                                        ; unused
     813/     25C :                     
     814/     25C :                     ;****************************************************************************************************************
     815/     25C :                     ;                                                        
     816/     25C :                     ;                                             Turn the television on
     817/     25C :                     ;                                                        
     818/     25C :                     ;****************************************************************************************************************
     819/     25C :                     
     820/     25C : F8 00                       ldi     0                                                        ; set display address to $700
     821/     25E : A0                          plo     r0                                                       
     822/     25F : F8 07                       ldi     screen / 256                                             
     823/     261 : B0                          phi     r0                                                       
     824/     262 : E3                          sex     r3                                                       ; X = 3 (same as P)
     825/     263 : 61                          out     selectdevice                                             ; select TV device (2)
     826/     264 : 02                          db      devtv                                                    
     827/     265 : 62                          out     controldevice                                            ; turn TV on (why 3 ?)
     828/     266 : 03                          db      ctvon                                                    
     829/     267 : D4                          sep     r4                                                       
     830/     268 :                     
     831/     268 :                     ;****************************************************************************************************************
     832/     268 :                     ;                                                        
     833/     268 :                     ;                                               Turn hex keypad off
     834/     268 :                     ;                                                        
     835/     268 :                     ;****************************************************************************************************************
     836/     268 :                     
     837/     268 : E3                          sex     r3                                                       ; X = 3 (Same as P)
     838/     269 : 61                          out     selectdevice                                             ; select keypad device (1)
     839/     26A : 01                          db      devkeypad                                                
     840/     26B : 62                          out     controldevice                                            ; and turn it off
     841/     26C : 00                          db      ckeyoff                                                  
     842/     26D : D4                          sep     r4                                                       
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 18 - 7/18/2016 9:03:24


     843/     26E :                     
     844/     26E :                     ;****************************************************************************************************************
     845/     26E :                     ;                                                        
     846/     26E :                     ;                                             Return from subroutine
     847/     26E :                     ;                                                        
     848/     26E :                     ;****************************************************************************************************************
     849/     26E :                     
     850/     26E : 42                          lda     r2                                                       ; pop high return
     851/     26F : B5                          phi     r5                                                       ; into R5
     852/     270 : 42                          lda     r2                                                       ; same with low
     853/     271 : A5                          plo     r5                                                       
     854/     272 : D4                          sep     r4                                                       ; return.
     855/     273 :                     ;   
     856/     273 :                     ;   Load A and B into RA and RB
     857/     273 :                     ;   
     858/     273 :                     readabregs:
     859/     273 : 96                          ghi     r6                                                       ; RF = $110
     860/     274 : BF                          phi     rf                                                       
     861/     275 : F8 10                       ldi     areg & 255                                               
     862/     277 : AF                          plo     rf                                                       
     863/     278 : 4F                          lda     rf                                                       ; load in A
     864/     279 : BA                          phi     ra                                                       
     865/     27A : 4F                          lda     rf                                                       
     866/     27B : AA                          plo     ra                                                       
     867/     27C : 4F                          lda     rf                                                       ; load in B
     868/     27D : BB                          phi     rb                                                       
     869/     27E : 4F                          lda     rf                                                       
     870/     27F : AB                          plo     rb                                                       
     871/     280 : D3                          sep     r3                                                       
     872/     281 :                     
     873/     281 :                     ;****************************************************************************************************************
     874/     281 :                     ;                                                        
     875/     281 :                     ;                                               2xkk write kk to vX
     876/     281 :                     ;                                                        
     877/     281 :                     ;****************************************************************************************************************
     878/     281 :                     
     879/     281 :                     opcode2:
     880/     281 : 45                          lda     r5                                                       ; read 2nd instruction byte
     881/     282 : 56                          str     r6                                                       ; save in Vx
     882/     283 : D4                          sep     r4                                                       
     883/     284 :                     ;   
     884/     284 :                     ;   Write to tape - delay
     885/     284 :                     ;   
     886/     284 :                     exitwritetape:
     887/     284 : D3                          sep     r3                                                       
     888/     285 :                     writetapedelay:
     889/     285 : F8 14                       ldi     14h                                                      ; set timer counter
     890/     287 : AF                          plo     rf                                                       
     891/     288 :                     writetapedelayloop:
     892/     288 : 2F                          dec     rf                                                       
     893/     289 : 8F                          glo     rf                                                       
     894/     28A : 3A 88                       bnz     writetapedelayloop                                       
     895/     28C : 30 B0                       br      writedfbittape                                           ; next time, it will write 0/1
     896/     28E :                     
     897/     28E :                     ;   
     898/     28E :                     ;   Do tone Vx = Tone VY = Delay
     899/     28E :                     ;   
     900/     28E :                     playtone:
     901/     28E : 46                          lda     r6                                                       ; read X (tone)
     902/     28F : BE                          phi     re                                                       ; store in tone register
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 19 - 7/18/2016 9:03:24


     903/     290 : F8 6E                       ldi     ghirf & 255                                              ; set to identify return.
     904/     292 : A6                          plo     r6                                                       
     905/     293 : 47                          lda     r7                                                       ; read delay time.
     906/     294 : BF                          phi     rf                                                       ; set RF counter.
     907/     295 : D8                          sep     r8                                                       ; call the tone routine.
     908/     296 : BA                          db      tonegeneration & 255                                     
     909/     297 : 15                          inc     r5                                                       ; fetch the 2nd byte
     910/     298 : D4                          sep     r4                                                       
     911/     299 :                     
     912/     299 :                     ;****************************************************************************************************************
     913/     299 :                     ;                                                        
     914/     299 :                     ;                    8xyn  x = x or y (1) x and y (2) x+y(4) x-y (5), V0 is carry / not borrow
     915/     299 :                     ;                                                        
     916/     299 :                     ;****************************************************************************************************************
     917/     299 :                     
     918/     299 :                     opcode8:
     919/     299 : 22                          dec     r2                                                       ; push $D3 on the stack
     920/     29A : F8 D3                       ldi     0d3h                                                     ; (SEP R3)
     921/     29C : 52                          str     r2                                                       
     922/     29D : 22                          dec     r2                                                       
     923/     29E : 45                          lda     r5                                                       ; get the low byte
     924/     29F : F9 F0                       ori     0f0h                                                     ; F1 F2 F4 F5 which are or and + -
     925/     2A1 : 52                          str     r2                                                       ; save on stack
     926/     2A2 : E6                          sex     r6                                                       ; RX points to the Rx value
     927/     2A3 : 47                          lda     r7                                                       ; get the RY value
     928/     2A4 : D2                          sep     r2                                                       ; call the code pushed on the stack
     929/     2A5 : 56                          str     r6                                                       ; save at R6 (Vx)
     930/     2A6 : F8 00                       ldi     0                                                        ; set R6 to point to $100 V0
     931/     2A8 : A6                          plo     r6                                                       
     932/     2A9 : 96                          ghi     r6                                                       ; D = 1
     933/     2AA : 33 AD                       bdf     writedf                                                  ; if DF clear then
     934/     2AC : F6                          shr                                                              ; D = 0
     935/     2AD :                     writedf:
     936/     2AD : 56                          str     r6                                                       ; write DF out to V0
     937/     2AE : D4                          sep     r4                                                       
     938/     2AF :                     
     939/     2AF :                     ;****************************************************************************************************************
     940/     2AF :                     ;                                                        
     941/     2AF :                     ;       Write DF to tape. Sets up R6 to return to tape code, and writes for 2 or 3 cycles depending on DF.
     942/     2AF :                     ;                                                        
     943/     2AF :                     ;****************************************************************************************************************
     944/     2AF :                     
     945/     2AF :                     exitwritebit:
     946/     2AF : D3                          sep     r3                                                       
     947/     2B0 :                     writedfbittape:
     948/     2B0 : F8 72                       ldi     glorf & 255                                              
     949/     2B2 : A6                          plo     r6                                                       
     950/     2B3 : 9C                          ghi     rc                                                       ; D = 2 (write cycles)
     951/     2B4 : 3B B9                       bnf     savecyclesize                                            ; if bit to write zero, skip
     952/     2B6 : 1B                          inc     rb                                                       ; inc parity value in RB.0
     953/     2B7 : FC 03                       adi     3                                                        ; D = 5
     954/     2B9 :                     savecyclesize:
     955/     2B9 : AF                          plo     rf                                                       ; put write value in RF
     956/     2BA :                     
     957/     2BA :                     ;****************************************************************************************************************
     958/     2BA :                     ;                                                        
     959/     2BA :                     ;                        Tone Generate (P = C), RE.1 = Pitch, RF.0 = Cycles to do it for.
     960/     2BA :                     ;                   R6 is set to 72 for read tape and 6E for make tone, which is how it figures
     961/     2BA :                     ;                        out what to do afterwards,this is used for tape and cassette out.
     962/     2BA :                     ;                                                        
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 20 - 7/18/2016 9:03:24


     963/     2BA :                     ;****************************************************************************************************************
     964/     2BA :                     
     965/     2BA :                     tonegeneration:
     966/     2BA : EC                          sex     rc                                                       ; X = P = C
     967/     2BB : 63                          out     controllatch                                             ; set External Function Register -> Run
     968/     2BC : 05                          db      clspeakerbit+clrunmode                                   ; speaker line
     969/     2BD : 9E                          ghi     re                                                       ; value 3, set in write tape routine for tape
     970/     2BE :                     instructiond:
     971/     2BE : FF 01                       smi     1                                                        ; short delay loop
     972/     2C0 : 3A BE                       bnz     instructiond                                             
     973/     2C2 : 63                          out     controllatch                                             ; reset speaker line.
     974/     2C3 : 01                          db      clrunmode                                                
     975/     2C4 : 2F                          dec     rf                                                       ; done it correct number of times
     976/     2C5 : D6                          sep     r6                                                       ; call F0/F1 -> D, identify caller
     977/     2C6 : 3A BA                       bnz     tonegeneration                                           ; tone, go back to tone loop
     978/     2C8 : 30 84                       br      exitwritetape                                            ; tape, go back to tape loop
     979/     2CA :                     
     980/     2CA :                     ;****************************************************************************************************************
     981/     2CA :                     ;                                                        
     982/     2CA :                     ;                                             4xkk  Vx = kk & random
     983/     2CA :                     ;                                                        
     984/     2CA :                     ;****************************************************************************************************************
     985/     2CA :                     
     986/     2CA :                     opcode4:
     987/     2CA : 19                          inc     r9                                                       ; bump and read random lower
     988/     2CB : 89                          glo     r9                                                       
     989/     2CC : A7                          plo     r7                                                       ; R7 = $01<R9.0>
     990/     2CD : E7                          sex     r7                                                       ; X points there, use as randomish data
     991/     2CE : 99                          ghi     r9                                                       ; random high
     992/     2CF : F4                          add                                                              ; R9.1 + Mem[$01<R9.0>]
     993/     2D0 : 22                          dec     r2                                                       ; push on stack
     994/     2D1 : 52                          str     r2                                                       
     995/     2D2 : F6                          shr                                                              ; add to self shifted right
     996/     2D3 : E2                          sex     r2                                                       
     997/     2D4 : F4                          add                                                              
     998/     2D5 : B9                          phi     r9                                                       ; update R9 high
     999/     2D6 : 56                          str     r6                                                       ; save at Vx
    1000/     2D7 : E6                          sex     r6                                                       ; RX points to Vx
    1001/     2D8 : 45                          lda     r5                                                       ; read low byte (mask)
    1002/     2D9 : F2                          and                                                              ; and with Vx
    1003/     2DA : 56                          str     r6                                                       ; update
    1004/     2DB : 12                          inc     r2                                                       ; fix up stack and exit.
    1005/     2DC : D4                          sep     r4                                                       
    1006/     2DD :                     
    1007/     2DD :                     ;****************************************************************************************************************
    1008/     2DD :                     ;                                                        
    1009/     2DD :                     ;               9xys  Draw sxs pattern (5 or 8) x = pattern address in page 3 y = tv cell address.
    1010/     2DD :                     ;                                                        
    1011/     2DD :                     ;****************************************************************************************************************
    1012/     2DD :                     opcode9:
    1013/     2DD : 45                          lda     r5                                                       ; Get next byte
    1014/     2DE : FA 0F                       ani     0fh                                                      ; look at lower 4 bits which are size
    1015/     2E0 : AF                          plo     rf                                                       ; RF.0 is the number of lines to do.
    1016/     2E1 :                     
    1017/     2E1 :                     ;****************************************************************************************************************
    1018/     2E1 :                     ;                                                        
    1019/     2E1 :                     ;                                                   RF = #lines
    1020/     2E1 :                     ;                                                        
    1021/     2E1 :                     ;****************************************************************************************************************
    1022/     2E1 :                     
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 21 - 7/18/2016 9:03:24


    1023/     2E1 : E6                          sex     r6                                                       ; R(x) points to VX
    1024/     2E2 : F0                          ldx                                                              ; read X
    1025/     2E3 : AA                          plo     ra                                                       ; save in RA.0
    1026/     2E4 : F8 03                       ldi     graphics / 256                                           ; RA is $03[Vx]
    1027/     2E6 : BA                          phi     ra                                                       
    1028/     2E7 :                     
    1029/     2E7 :                     ;****************************************************************************************************************
    1030/     2E7 :                     ;                                                        
    1031/     2E7 :                     ;                  RF = #lines. RA = address of graphic data. Calc address from tv cell address.
    1032/     2E7 :                     ;                       Bits 3,4 are the vertical cell position (0-3, 8 pixels high cell).
    1033/     2E7 :                     ;                       Bits 0,1,2 are the horizontal position. (0-7, 8 pixels wide cell).
    1034/     2E7 :                     ;                                                        
    1035/     2E7 :                     ;****************************************************************************************************************
    1036/     2E7 :                     
    1037/     2E7 : 47                          lda     r7                                                       ; read Y (Cell number)
    1038/     2E8 : AB                          plo     rb                                                       ; RB.0 = Y
    1039/     2E9 : F6                          shr                                                              ; R6 = Y >> 1 << 4 (Y * 8)
    1040/     2EA : 56                          str     r6                                                       ; using shift left function, so bits
    1041/     2EB : D8                          sep     r8                                                       ; 3 and 4 are now in bits 6,7
    1042/     2EC : 4D                          db      shiftvxleft4 & 255                                       
    1043/     2ED : 8B                          glo     rb                                                       ; get original cell number for bits 0-2
    1044/     2EE : F1                          or                                                               ; or with bits 6-7
    1045/     2EF : FA C7                       ani     0c7h                                                     ; remove so only bits 0-2 and bits 6-7
    1046/     2F1 : AB                          plo     rb                                                       
    1047/     2F2 : F8 07                       ldi     screen/256                                               ; set RB.1 = 07<addr>
    1048/     2F4 : BB                          phi     rb                                                       
    1049/     2F5 :                     
    1050/     2F5 :                     copypixeldata:
    1051/     2F5 : 4A                          lda     ra                                                       ; read first byte of data
    1052/     2F6 : 5B                          str     rb                                                       ; write to the screen
    1053/     2F7 : 8B                          glo     rb                                                       ; get low byte of screen address
    1054/     2F8 : FC 08                       adi     08                                                       ; go one row down
    1055/     2FA : AB                          plo     rb                                                       ; update screen address
    1056/     2FB : 2F                          dec     rf                                                       ; decrement line counter.
    1057/     2FC : 8F                          glo     rf                                                       ; check it
    1058/     2FD : 3A F5                       bnz     copypixeldata                                            ; do next row.
    1059/     2FF : D4                          sep     r4                                                       
    1060/     300 :                     
    1061/     300 :                     ;****************************************************************************************************************
    1062/     300 :                     ;                                                        
    1063/     300 :                     ;    0300 font data. First 16 bytes is offset for 0-9A-F required for the monitor then the default characters
    1064/     300 :                     ;                                       Everything after that is optional.
    1065/     300 :                     ;                                                        
    1066/     300 :                     ;****************************************************************************************************************
    1067/     300 :                     Graphics:
    1068/     300 :                                include basicFont.inc
(1)    1/     300 :                     ;
(1)    2/     300 :                     ; automatically generated font data and/or index file.
(1)    3/     300 :                     ;
(1)    4/     300 :                         org 00300H
(1)    5/     300 : 48                      db 048H
(1)    6/     301 : 10                      db 010H
(1)    7/     302 : 2E                      db 02EH
(1)    8/     303 : 2A                      db 02AH
(1)    9/     304 : 19                      db 019H
(1)   10/     305 : 32                      db 032H
(1)   11/     306 : 44                      db 044H
(1)   12/     307 : 14                      db 014H
(1)   13/     308 : 4C                      db 04CH
(1)   14/     309 : 1E                      db 01EH
 AS V1.42 Beta [Bld 102] - source file fel.asm(basicFont.inc) - page 22 - 7/18/2016 9:03:24


(1)   15/     30A : 50                      db 050H
(1)   16/     30B : 22                      db 022H
(1)   17/     30C : 40                      db 040H
(1)   18/     30D : 26                      db 026H
(1)   19/     30E : 37                      db 037H
(1)   20/     30F : 3B                      db 03BH
(1)   21/     310 : 10                      db 010H
(1)   22/     311 : 30                      db 030H
(1)   23/     312 : 10                      db 010H
(1)   24/     313 : 10                      db 010H
(1)   25/     314 : 7C                      db 07CH
(1)   26/     315 : 08                      db 008H
(1)   27/     316 : 10                      db 010H
(1)   28/     317 : 20                      db 020H
(1)   29/     318 : 40                      db 040H
(1)   30/     319 : 08                      db 008H
(1)   31/     31A : 18                      db 018H
(1)   32/     31B : 28                      db 028H
(1)   33/     31C : 7C                      db 07CH
(1)   34/     31D : 08                      db 008H
(1)   35/     31E : 38                      db 038H
(1)   36/     31F : 44                      db 044H
(1)   37/     320 : 3C                      db 03CH
(1)   38/     321 : 04                      db 004H
(1)   39/     322 : 78                      db 078H
(1)   40/     323 : 24                      db 024H
(1)   41/     324 : 38                      db 038H
(1)   42/     325 : 24                      db 024H
(1)   43/     326 : 78                      db 078H
(1)   44/     327 : 44                      db 044H
(1)   45/     328 : 44                      db 044H
(1)   46/     329 : 44                      db 044H
(1)   47/     32A : 78                      db 078H
(1)   48/     32B : 04                      db 004H
(1)   49/     32C : 18                      db 018H
(1)   50/     32D : 04                      db 004H
(1)   51/     32E : 78                      db 078H
(1)   52/     32F : 04                      db 004H
(1)   53/     330 : 38                      db 038H
(1)   54/     331 : 40                      db 040H
(1)   55/     332 : 7C                      db 07CH
(1)   56/     333 : 40                      db 040H
(1)   57/     334 : 78                      db 078H
(1)   58/     335 : 04                      db 004H
(1)   59/     336 : 78                      db 078H
(1)   60/     337 : 7C                      db 07CH
(1)   61/     338 : 40                      db 040H
(1)   62/     339 : 7C                      db 07CH
(1)   63/     33A : 40                      db 040H
(1)   64/     33B : 7C                      db 07CH
(1)   65/     33C : 40                      db 040H
(1)   66/     33D : 7C                      db 07CH
(1)   67/     33E : 40                      db 040H
(1)   68/     33F : 40                      db 040H
(1)   69/     340 : 3C                      db 03CH
(1)   70/     341 : 40                      db 040H
(1)   71/     342 : 40                      db 040H
(1)   72/     343 : 40                      db 040H
(1)   73/     344 : 3C                      db 03CH
(1)   74/     345 : 40                      db 040H
 AS V1.42 Beta [Bld 102] - source file fel.asm(basicFont.inc) - page 23 - 7/18/2016 9:03:24


(1)   75/     346 : 78                      db 078H
(1)   76/     347 : 44                      db 044H
(1)   77/     348 : 38                      db 038H
(1)   78/     349 : 44                      db 044H
(1)   79/     34A : 44                      db 044H
(1)   80/     34B : 44                      db 044H
(1)   81/     34C : 38                      db 038H
(1)   82/     34D : 44                      db 044H
(1)   83/     34E : 38                      db 038H
(1)   84/     34F : 44                      db 044H
(1)   85/     350 : 38                      db 038H
(1)   86/     351 : 44                      db 044H
(1)   87/     352 : 7C                      db 07CH
(1)   88/     353 : 44                      db 044H
(1)   89/     354 : 44                      db 044H
(1)   90/     355 : 7C                      db 07CH
(1)   91/     356 : 44                      db 044H
(1)   92/     357 : 44                      db 044H
(1)   93/     358 : 44                      db 044H
(1)   94/     359 : 44                      db 044H
(1)   95/     35A : 38                      db 038H
(1)   96/     35B : 44                      db 044H
(1)   97/     35C : 08                      db 008H
(1)   98/     35D : 10                      db 010H
(1)   99/     35E : 10                      db 010H
(1)  100/     35F : 00                      db 000H
(1)  101/     360 : 00                      db 000H
(1)  102/     361 : 00                      db 000H
(1)  103/     362 : 00                      db 000H
(1)  104/     363 : 00                      db 000H
(1)  105/     364 : 7C                      db 07CH
(1)  106/     365 : 00                      db 000H
(1)  107/     366 : 00                      db 000H
(1)  108/     367 : 7C                      db 07CH
(1)  109/     368 : 00                      db 000H
(1)  110/     369 : 7C                      db 07CH
(1)  111/     36A : 00                      db 000H
(1)  112/     36B : 18                      db 018H
(1)  113/     36C : 00                      db 000H
(1)  114/     36D : 18                      db 018H
(1)  115/     36E : 00                      db 000H
(1)  116/     36F :                     
    1069/     36F :                     
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 24 - 7/18/2016 9:03:24


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - |  AREG :                         110 C |
*BIGENDIAN :                      0 - |  BORROWOCCURRED :                68 C |
*BRANCHEXT :                      0 - |  BREG :                         112 C |
 CALL02 :                       166 C | *CASESENSITIVE :                  0 - |
 CKEYOFF :                        0 - |  CKEYON :                         1 - |
 CLRUNMODE :                      1 - |  CLSLOOP :                       7D C |
 CLSPEAKERBIT :                   4 - |  CLTAPEBIT :                      2 - |
*CONSTPI :        3.141592653589793 - |  CONTROLDEVICE :                  2 - |
 CONTROLLATCH :                   3 - |  COPYPIXELDATA :                2F5 C |
 COPYREGLOOP :                  237 C |  CTAPEREAD :                     20 - |
 CTVOFF :                         0 - |  CTVON :                          3 - |
*DATE :                   7/18/2016 - |  DECTABLE :                     114 C |
 DEVKEYPAD :                      1 - |  DEVTAPE :                        3 - |
 DEVTV :                          2 - |  DONTSKIP :                     22A C |
 EXECR3 :                       15C C |  EXIT02CALL :                   165 C |
 EXITGHIRF :                    16D C |  EXITGLORF :                    171 C |
 EXITINTERRUPT :                117 C | *EXITWRITEBIT :                 2AF C |
 EXITWRITETAPE :                284 C |  EXTERNALBUS :                    6 - |
 EXTERNALCONTROL :                4 - | *FALSE :                          0 - |
 FELDISPLAY :                    A4 C |  FELNEXT :                       DC C |
 FELPACK :                       E2 C |  FELSHOW :                       E8 C |
 FELSTOP :                       E0 C |  FELWRITETAPE :                  CA C |
*FULLPMMU :                       1 - |  GHIRF :                        16E C |
 GLORF :                        172 C |  GRAPHICS :                     300 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTRUCTIONA :                 200 C |  INSTRUCTIONB :                 209 C |
 INSTRUCTIONC :                 22B C |  INSTRUCTIOND :                 2BE C |
 INSTRUCTIONE :                 175 C |  INSTRUCTIONF :                 215 C |
 INSTRUCTIONVECTOR :            1C0 C | *INSUPMODE :                      0 - |
 INTERRUPT :                    119 C |  KEYPADON :                     246 C |
 KEYPADPORT :                     0 - | *LISTON :                         1 - |
 LOADADDRCONST :                202 C | *MACEXP :                         1 - |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MONITOR :                       84 C | *NESTMAX :                      100 - |
 NEXTDIGIT :                     58 C |  NEXTINSTRUCTION :              13B C |
 NEXTTIMER :                    131 C |  OPCODE0 :                      160 C |
 OPCODE1 :                      20D C |  OPCODE2 :                      281 C |
 OPCODE3 :                      223 C |  OPCODE4 :                      2CA C |
 OPCODE5 :                      21A C |  OPCODE6 :                      258 C |
 OPCODE7 :                       19 C |  OPCODE8 :                      299 C |
 OPCODE9 :                      2DD C | *PACKING :                        0 - |
*PADDING :                        1 - | *PLAYTONE :                     28E C |
 R0 :                             0 - |  R1 :                             1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RA :                             A - |  RB :                             B - |
 RC :                             C - |  RD :                             D - |
 RE :                             E - |  READABREGS :                   273 C |
 READKEYINPUT :                 17E C |  REGISTERS :                    100 C |
*RELAXED :                        0 - |  RF :                             F - |
 SAVECYCLESIZE :                2B9 C |  SCREEN :                       700 - |
 SELECTDEVICE :                   1 - |  SETADDRREG :                    2C C |
 AS V1.42 Beta [Bld 102] - source file fel.asm - page 25 - 7/18/2016 9:03:24


 SHIFTVXLEFT4 :                 24D C |  SKIPIFVXNOTD :                 224 C |
 SKIPINSTRUCTION :              184 C |  SKIPINSTRUCTION2 :             228 C |
 STACK :                        1E0 C |  STACKTOP :                     1FF C |
*START :                          0 C |  SUBTRACTUNIT :                  5B C |
 TAPEBITOUTLOOP :               1AC C |  TAPEBYTEOUTLOOP :              1A2 C |
 TAPEDELAYLOOP :                 4B C | *TIME :                     9:03:24 - |
 TIMERUPDATELOOP :              129 C |  TONEGENERATION :               2BA C |
*TRUE :                           1 - | *VERSION :                     142F - |
 WAITKEYPRESS :                 17C C |  WRITEDF :                      2AD C |
 WRITEDFBITTAPE :               2B0 C |  WRITETAPEDELAY :               285 C |
 WRITETAPEDELAYLOOP :           288 C |

    135 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file fel.asm - page 26 - 7/18/2016 9:03:24


  defined macros:
  ---------------

FEL                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file fel.asm - page 27 - 7/18/2016 9:03:24


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1239 lines source file
   1363 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
