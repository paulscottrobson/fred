 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 1 - 7/26/2016 10:40:32


       1/       0 :                     ; *********************************************************************************************************************
       2/       0 :                     ; *********************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;		Core Runtime and Interpreter. Has a collection of 1801 code primitives, the bytecode interpreter and
       5/       0 :                     ;		the FRED display driver. 
       6/       0 :                     ;
       7/       0 :                     ;		Words in core are indicated by [[word]] in the comments, and are extracted from the list file.
       8/       0 :                     ; 		(so memory is not wasted storing the word name)
       9/       0 :                     ;
      10/       0 :                     ; *********************************************************************************************************************
      11/       0 :                     ; *********************************************************************************************************************
      12/       0 :                     
      13/       0 :                     		cpu 1802 									; actually it is a 1801.
      14/       0 :                     
      15/       0 : =0H                 r0 = 0 												; display pointer (R0)
      16/       0 : =1H                 rInterrupt = 1 										; interrupt address (R1)
      17/       0 : =2H                 rRStack = 2 										; return stack (R2)
      18/       0 : =3H                 rDStack = 3 										; data stack (R3)
      19/       0 : =4H                 rProgram = 4 										; program code pointer (R4)
      20/       0 : =5H                 rVariables = 5 										; points to variables (R5)
      21/       0 : =6H                 r6 = 6												; work registers (R6-R10, can also use RE)
      22/       0 :                     
      23/       0 : =BH                 rCounter = 11 										; interrupt counter (RB, bumps every tick)
      24/       0 : =CH                 rc = 12 											; execute instruction at r4
      25/       0 : =DH                 rd = 13 											; makes instruction byte code
      26/       0 : =EH                 re = 14 											; general temporary register
      27/       0 : =FH                 rf = 15 											; pc register when running 1801 code.
      28/       0 :                     
      29/       0 :                     lri 	macro r,n 									; macro to load register.
      30/       0 :                     		ldi (n) & 255
      31/       0 :                     		plo r
      32/       0 :                     		ldi (n) / 256
      33/       0 :                     		phi r
      34/       0 :                     		endm
      35/       0 :                     
      36/       0 : =700H               videoMemory = 0700h 								; 64 x 32 Video RAM. Data memory is in the page below.
      37/       0 : =600H               dataMemory = 0600h									; data memory page.
      38/       0 :                     
      39/       0 : 30 FB               		br 		Boot 								; [[;]] skip over machine code. Also defines return (;) as $00
      40/       2 :                     
      41/       2 :                     ; *********************************************************************************************************************
      42/       2 :                     ;
      43/       2 :                     ;								Forth 1801 assembler primitives (optimisable for 1802)
      44/       2 :                     ;
      45/       2 :                     ;	@,!,+!,1+,1-,2*,2/,+,-,and,or,xor,literal,drop,dup,over,0-,0=,0<,0,1,-1,swap,R>,>R,0>,0BR,;,?DUP,ROT,0>,=,Pick
      46/       2 :                     ;	br,varpage,page!
      47/       2 :                     ; *********************************************************************************************************************
      48/       2 :                     ;					Note some of these drop through, so the order is important in some cases
      49/       2 :                     ;	When changing this code check the position of the GHI R0s in Boot, the first must be in page 0 the second 
      50/       2 :                     ;   in page 1.
      51/       2 :                     ; *********************************************************************************************************************
      52/       2 :                     
      53/       2 : F8 68               FW_In:	ldi 	068h								; [[PORT>]] input from port
      54/       4 : 30 08               		br 		FW_IO
      55/       6 : F8 60               FW_Out:	ldi 	060h 								; [[>PORT]] output to port.
      56/       8 :                     
      57/       8 : AE                  FW_IO:	plo 	re 									; save in RE.0
      58/       9 :                     
      59/       9 : 22                  		dec 	rRStack	 							; push $DC (SEP RC) on return stack.
      60/       A : F8 DC               		ldi 	0DCh 								
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 2 - 7/26/2016 10:40:32


      61/       C : 52                  		str 	rRStack
      62/       D :                     
      63/       D : 8E                  		glo 	re 									; get instruction base (INP or OUT)
      64/       E : F1                  		or 											; or with the port number
      65/       F : 22                  		dec 	rRStack 							; push on rstack
      66/      10 : 52                  		str 	rRStack
      67/      11 :                     
      68/      11 : FA 08               		ani 	008h 								; if IN, we need the old stack element for the result so we don't 
      69/      13 : 3A 16               		bnz 	__IO_DoIt 							; do this INC, which is throwing away the port address
      70/      15 : 13                  		inc 	rDStack 							; for OUT this leaves the data to be outed which post increments
      71/      16 :                     __IO_DoIt:
      72/      16 : D2                  		sep 	rRStack 							; run the code on the stack.
      73/      17 :                     
      74/      17 :                     ; *********************************************************************************************************************
      75/      17 :                     
      76/      17 :                     FW_Pick:
      77/      17 : 83                  		glo 	rDStack								; add TOS to DStack into RE
      78/      18 : F4                  		add 
      79/      19 : AE                  		plo 	re
      80/      1A : 93                  		ghi 	rDStack
      81/      1B : BE                  		phi 	re
      82/      1C : 4E                  		lda 	re 									; get the picked value
      83/      1D : 53                  		str 	rDStack 							; save at TOS
      84/      1E : DC                  		sep 	rc 									; and exit
      85/      1F :                     
      86/      1F :                     ; *********************************************************************************************************************
      87/      1F :                     
      88/      1F :                     FW_ROT:												; [[ROT]] rotate top 3 n1 n2 n3 -> n2 n3 n1
      89/      1F : 43                  		lda 	rDStack 							; get n3
      90/      20 : AE                  		plo 	re
      91/      21 : F0                  		ldx 										; get n2
      92/      22 : BE                  		phi 	re
      93/      23 : 8E                  		glo 	re 									; get n3
      94/      24 : 53                  		str 	rDStack 							; save where n2 was
      95/      25 : 13                  		inc 	rDStack 							; point to n1
      96/      26 : F0                  		ldx 										; read n1
      97/      27 : AE                  		plo 	re 									; save in RE.0
      98/      28 : 9E                  		ghi 	re 									; get n2
      99/      29 : 53                  		str 	rDStack 							; save where n1 was
     100/      2A : 23                  		dec 	rDStack 							; point r3 back to start
     101/      2B : 23                  		dec 	rDStack
     102/      2C : 8E                  		glo 	re 									; get n1
     103/      2D : 53                  		str 	rDStack
     104/      2E : DC                  		sep 	rc
     105/      2F :                     
     106/      2F :                     ; *********************************************************************************************************************
     107/      2F :                     
     108/      2F :                     FW_BR:												; [[BR]] Unconditional Branch
     109/      2F : 44                  		lda 	rProgram 							; read offset
     110/      30 : 30 38               		br 		__Branch 							; jump into 0BR after the tos = 0 test
     111/      32 :                     
     112/      32 :                     ; *********************************************************************************************************************
     113/      32 :                     
     114/      32 :                     FW_0BR: 											; [[0BR]] if pop = 0 then advance by <next> (7 bit signed)
     115/      32 : 44                  		lda 	rProgram 							; read offset into RE.0
     116/      33 : AE                  		plo 	re 
     117/      34 :                     
     118/      34 : 43                  		lda 	rDStack 							; pop value off top of stack
     119/      35 : 3A 5F               		bnz 	__Return 							; if non zero, fail. 
     120/      37 :                     
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 3 - 7/26/2016 10:40:32


     121/      37 : 8E                  		glo 	re 									; put value onto the data stack as a temporary measure
     122/      38 :                     __Branch:
     123/      38 : 23                  		dec 	rDStack
     124/      39 : 53                  		str 	rDStack
     125/      3A : FA 80               		ani 	080h 								; check bit 7
     126/      3C : 3A 49               		bnz 	__0BR_Backwards 					; if -ve it is a backward jump.
     127/      3E :                     
     128/      3E : 84                  		glo 	rProgram 							; add offset to R4/low
     129/      3F : F4                  		add
     130/      40 : A4                  		plo 	rProgram
     131/      41 : 3B 47               		bnf 	__0BR_Exit
     132/      43 : 94                  		ghi 	rProgram 							; add carry into R4
     133/      44 : FC 01               		adi 	1
     134/      46 :                     __0BR_SaveR41Exit:
     135/      46 : B4                  		phi 	rProgram
     136/      47 :                     __0BR_Exit:
     137/      47 : 13                  		inc 	rDStack 							; drop temp off stack
     138/      48 : DC                  		sep 	rc
     139/      49 :                     
     140/      49 :                     __0BR_Backwards:
     141/      49 : 84                  		glo 	rProgram 							; subtract from R4/Low
     142/      4A : F4                  		add 
     143/      4B : A4                  		plo 	rProgram
     144/      4C : 33 47               		bdf 	__0BR_Exit 							; not borrow, exit.
     145/      4E : 94                  		ghi 	rProgram 							; carry borrow through.
     146/      4F : FF 01               		smi 	1
     147/      51 : 30 46               		br 		__0BR_SaveR41Exit
     148/      53 :                     
     149/      53 :                     
     150/      53 :                     ; *********************************************************************************************************************
     151/      53 :                     
     152/      53 :                     FW_FromR:											; [[R>]] return stack to data stack
     153/      53 : 42                  		lda 	rRStack
     154/      54 : 23                  		dec 	rDStack
     155/      55 : 53                  		str 	rDStack
     156/      56 : 42                  		lda 	rRStack
     157/      57 : 30 BB               		br 		_PushD
     158/      59 :                     
     159/      59 :                     ; *********************************************************************************************************************
     160/      59 :                     
     161/      59 :                     FW_ToR:												; [[>R]] data stack to return stack
     162/      59 : 43                  		lda 	rDStack
     163/      5A : 22                  		dec 	rRStack
     164/      5B : 52                  		str 	rRStack
     165/      5C : 43                  		lda 	rDStack
     166/      5D : 22                  		dec 	rRStack
     167/      5E : 52                  		str 	rRStack
     168/      5F :                     __Return:
     169/      5F : DC                  		sep 	rc
     170/      60 :                     
     171/      60 :                     ; *********************************************************************************************************************
     172/      60 :                     
     173/      60 :                     FW_Read:	 										; [[@]] read from variable page.
     174/      60 : F0                  		ldx 										; read address 
     175/      61 : A5                  		plo 	rVariables 							; point RVariables to it
     176/      62 : 45                  		lda 	rVariables 							; read rVariables
     177/      63 : 25                  		dec 	rVariables 							; unpick if overflowed.
     178/      64 : 30 BC               		br 		_SaveD 								; and write it out.
     179/      66 :                     
     180/      66 :                     ; *********************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 4 - 7/26/2016 10:40:32


     181/      66 :                     
     182/      66 :                     FW_Store:											; [[!]] write to variable page.
     183/      66 : 43                  		lda 	rDStack								; read address
     184/      67 : A5                  		plo 	rVariables 							; rVariables points to it
     185/      68 : 43                  		lda 	rDStack 							; read data
     186/      69 : 55                  		str 	rVariables 							; write it.
     187/      6A : DC                  		sep 	rc
     188/      6B :                     
     189/      6B :                     ; *********************************************************************************************************************
     190/      6B :                     
     191/      6B :                     FW_AddStore:										; [[+!]] add tos to memory
     192/      6B : 43                  		lda 	rDStack								; read address
     193/      6C : A5                  		plo 	rVariables 							; rVariables points to it
     194/      6D : 43                  		lda 	rDStack 							; read data
     195/      6E : E5                  		sex 	rVariables
     196/      6F : F4                  		add 										; add to memory
     197/      70 : E3                  		sex 	rDStack
     198/      71 : 55                  		str 	rVariables 							; write it.
     199/      72 : DC                  		sep 	rc
     200/      73 :                     
     201/      73 :                     ; *********************************************************************************************************************
     202/      73 :                     
     203/      73 :                     FW_Inc:												; [[1+]] Increment
     204/      73 : F8 01               		ldi 	1
     205/      75 : 30 83               		br 		__AddWr
     206/      77 :                     
     207/      77 :                     ; *********************************************************************************************************************
     208/      77 :                     
     209/      77 :                     FW_Dec:												; [[1-]] Increment
     210/      77 : F8 FF               		ldi 	0FFh
     211/      79 : 30 83               		br 		__AddWr
     212/      7B :                     
     213/      7B :                     ; *********************************************************************************************************************
     214/      7B :                     
     215/      7B :                     FW_ShiftR:											; [[2/]] Shift right
     216/      7B : F0                  		ldx  										; read it
     217/      7C : F6                  		shr 										; shift right
     218/      7D : 30 BC               		br 		_SaveD 								; write back.
     219/      7F :                     
     220/      7F :                     ; *********************************************************************************************************************
     221/      7F :                     
     222/      7F :                     FW_ShiftL:											; [[2*]] Shift left
     223/      7F : F0                  		ldx 										; read tos
     224/      80 : 30 83               		br 		__AddWr 							; add it to itself.
     225/      82 :                     
     226/      82 :                     ; *********************************************************************************************************************
     227/      82 :                     
     228/      82 :                     FW_Add:												; [[+]] add top of stack values.
     229/      82 : 43                  		lda 	rDStack 							; read TOS
     230/      83 : F4                  __AddWr:add
     231/      84 : 30 BC               		br 		_SaveD
     232/      86 :                     
     233/      86 :                     ; *********************************************************************************************************************
     234/      86 :                     
     235/      86 :                     FW_Sub:												; [[-]] sub top of stack values.
     236/      86 : 43                  		lda 	rDStack 							; read TOS
     237/      87 : F5                  		sd
     238/      88 : 30 BC               		br 		_SaveD
     239/      8A :                     
     240/      8A :                     ; *********************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 5 - 7/26/2016 10:40:32


     241/      8A :                     
     242/      8A :                     FW_And:												; [[and]] and top of stack values.
     243/      8A : 43                  		lda 	rDStack 							; read TOS
     244/      8B : F2                  		and
     245/      8C : 30 BC               		br 		_SaveD
     246/      8E :                     
     247/      8E :                     ; *********************************************************************************************************************
     248/      8E :                     
     249/      8E :                     FW_Or:												; [[or]] or top of stack values.
     250/      8E : 43                  		lda 	rDStack 							; read TOS
     251/      8F : F1                  		or
     252/      90 : 30 BC               		br 		_SaveD
     253/      92 :                     
     254/      92 :                     ; *********************************************************************************************************************
     255/      92 :                     
     256/      92 :                     FW_Xor:												; [[xor]] xor top of stack values.
     257/      92 : 43                  		lda 	rDStack 							; read TOS
     258/      93 : F3                  		xor
     259/      94 : 30 BC               		br 		_SaveD
     260/      96 :                     
     261/      96 :                     ; *********************************************************************************************************************
     262/      96 :                     
     263/      96 :                     FW_Literal:											; [[LITERAL]], code loads literal to TOS
     264/      96 : 44                  		lda 	rProgram 							; read the literal in
     265/      97 : 30 BB               		br 		_PushD 								; push on stack
     266/      99 :                     
     267/      99 :                     ; *********************************************************************************************************************
     268/      99 :                     
     269/      99 :                     FW_Drop:											; [[DROP]], drops top of stack.
     270/      99 : 43                  		lda 	rDStack 							
     271/      9A : DC                  		sep 	rc
     272/      9B :                     
     273/      9B :                     ; *********************************************************************************************************************
     274/      9B :                     
     275/      9B :                     FW_QDup:											; [[?DUP]] word, duplicate if non zero else drop.
     276/      9B : F0                  		ldx 										; look at TOS
     277/      9C : 32 5F               		bz 		__Return 							; if zero leave unchanged, else drop through to DUP.
     278/      9E :                     
     279/      9E :                     ; *********************************************************************************************************************
     280/      9E :                     
     281/      9E :                     FW_Dup:												; [[DUP]], duplicate top of stack
     282/      9E : F0                  		ldx 										; read top of stack.
     283/      9F : 30 BB               		br 		_PushD
     284/      A1 :                     
     285/      A1 :                     ; *********************************************************************************************************************
     286/      A1 :                     
     287/      A1 : 13                  FW_Over:inc 	rDStack 							; [[OVER]] point to 2nd value
     288/      A2 : F0                  		ldx 										; read value
     289/      A3 : 23                  		dec 	rDStack 							; unpick increment
     290/      A4 : 30 BB               		br 		_PushD
     291/      A6 :                     
     292/      A6 :                     ; *********************************************************************************************************************
     293/      A6 :                     
     294/      A6 :                     FW_Negate: 											; [[0-]] Word, negates top of stack
     295/      A6 : 43                  		lda 	rDStack
     296/      A7 : 23                  		dec 	rDStack
     297/      A8 : FD 00               		sdi 	0
     298/      AA : 30 BC               		br 		_SaveD
     299/      AC :                     
     300/      AC :                     ; *********************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 6 - 7/26/2016 10:40:32


     301/      AC :                     
     302/      AC :                     FW_EqualZero:										; [[0=]] Word, sets to -1 if TOS zero 0 otherwise.
     303/      AC : 43                  		lda 	rDStack 							; get TOS
     304/      AD : 32 C5               		bz 		FW_Minus1 							; if zero, push -1 else push 0 (fall through)
     305/      AF :                     
     306/      AF :                     ; *********************************************************************************************************************
     307/      AF :                     
     308/      AF :                     FW_0:	
     309/      AF : 9F                  		ghi 	rf 									; [[0]] Word, pushes 0 on stack.
     310/      B0 : 30 BB               		br 		_PushD
     311/      B2 :                     
     312/      B2 :                     ; *********************************************************************************************************************
     313/      B2 :                     
     314/      B2 :                     FW_LessZero:										; [[0<]] Word, push 1 if negative else push 0
     315/      B2 : 43                  		lda 	rDStack 							; get TOS
     316/      B3 : FA 80               		ani 	080h								; look at the sign bit.
     317/      B5 : 32 AF               		bz 		FW_0 								; if +ve push 0 else drop through and push 1.
     318/      B7 : 30 C5               		br 		FW_Minus1
     319/      B9 :                     
     320/      B9 :                     ; *********************************************************************************************************************
     321/      B9 :                     
     322/      B9 :                     FW_1:	
     323/      B9 : F8 01               		ldi 	1 									; [[1]] Word, pushes -1 on stack
     324/      BB :                     
     325/      BB : 23                  _PushD:	dec 	rDStack 							; push on stack.
     326/      BC : 53                  _SaveD:	str 	rDStack
     327/      BD : DC                  		sep 	rc
     328/      BE :                     
     329/      BE :                     ; *********************************************************************************************************************
     330/      BE :                     
     331/      BE :                     FW_GreaterZero:										; [[0>]] Word, push -1 if >0 else push 0
     332/      BE : 43                  		lda 	rDStack 							; get value
     333/      BF : 32 AF               		bz 		FW_0 								; zero returns 0
     334/      C1 : FA 80               		ani 	80h									; check bit 7
     335/      C3 : 3A AF               		bnz 	FW_0 								; -ve returns 0
     336/      C5 :                     
     337/      C5 :                     ; *********************************************************************************************************************
     338/      C5 :                     
     339/      C5 :                     FW_Minus1:	
     340/      C5 : F8 FF               		ldi 	0FFh								; [[-1]] Word, pushes -1 on stack.
     341/      C7 : 30 BB               		br 		_PushD
     342/      C9 :                     
     343/      C9 :                     ; *********************************************************************************************************************
     344/      C9 :                     
     345/      C9 :                     FW_Swap:											; [[SWAP]] swap tos values.
     346/      C9 : 43                  		lda 	rDStack 							; read TOS, save in RE.0
     347/      CA : AE                  		plo 	re
     348/      CB : F0                  		ldx 										; read new TOS save in RE.1
     349/      CC : BE                  		phi 	re
     350/      CD : 8E                  		glo 	re 									; get value that is written
     351/      CE : 53                  		str 	rDStack
     352/      CF : 9E                  		ghi 	re 									; get value to push
     353/      D0 : 30 BB               		br 		_PushD
     354/      D2 :                     
     355/      D2 :                     ; *********************************************************************************************************************
     356/      D2 :                     
     357/      D2 :                     FW_Equals:											; [[=]] check top two values equal
     358/      D2 : DD                  		sep 	rd
     359/      D3 : 86                  		db 		FW_Sub
     360/      D4 : AC                  		db 		FW_EqualZero
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 7 - 7/26/2016 10:40:32


     361/      D5 : 00                  		db 		0 
     362/      D6 :                     
     363/      D6 :                     ; *********************************************************************************************************************
     364/      D6 :                     
     365/      D6 :                     FW_VariablePage:
     366/      D6 : F8 06               		ldi 	dataMemory / 256 					; [[VARPAGE]] pushes the page address of variables on the stack.
     367/      D8 : 30 BB               		br 		_PushD
     368/      DA :                     
     369/      DA :                     ; *********************************************************************************************************************
     370/      DA :                     
     371/      DA :                     FM_SetVariablePage:
     372/      DA : 43                  		lda 	rDStack 							; [[PAGE!]] sets the variable page from the default.
     373/      DB : B5                  		phi 	rVariables
     374/      DC : DC                  		sep 	rc
     375/      DD :                     
     376/      DD :                     ; *********************************************************************************************************************
     377/      DD :                     
     378/      DD : 30 DD               FW_Stop:br 		FW_Stop								; [[STOP]] word
     379/      DF :                     
     380/      DF :                     ; *********************************************************************************************************************
     381/      DF :                     
     382/      DF : F8 02               FW_2:	ldi 	2 									; [[2]]
     383/      E1 : 30 BB               		br 		_PushD
     384/      E3 : F8 03               FW_3:	ldi 	3 									; [[3]]
     385/      E5 : 30 BB               		br 		_PushD
     386/      E7 : F8 04               FW_4:	ldi 	4 									; [[4]]
     387/      E9 : 30 BB               		br 		_PushD
     388/      EB : F8 08               FW_8:	ldi 8 										; [[8]]
     389/      ED : 30 BB               		br 		_PushD
     390/      EF : F8 0A               FW_10:	ldi 	10 									; [[10]]
     391/      F1 : 30 BB               		br 		_PushD
     392/      F3 : F8 10               FW_16:	ldi 16 										; [[16]]
     393/      F5 : 30 BB               		br 		_PushD	
     394/      F7 : F8 64               FW_100:	ldi 100 									; [[100]]
     395/      F9 : 30 BB               		br 		_PushD
     396/      FB :                     
     397/      FB :                     ; *********************************************************************************************************************
     398/      FB :                     ;
     399/      FB :                     ;											Start up uForth interpreter
     400/      FB :                     ;
     401/      FB :                     ; *********************************************************************************************************************
     402/      FB :                     
     403/      FB : 90                  Boot:	ghi 	r0 									; reset counter
     404/      FC : BB                  		phi 	rCounter 							
     405/      FD : AB                  		plo 	rCounter
     406/      FE :                     
     407/      FE : F8 FF               		ldi 	0FFh 								; reset return stack to end of data page
     408/     100 : A2                  		plo 	rRStack
     409/     101 : F8 06               		ldi 	dataMemory / 256 					; set high address for the stacks and variable area (same page)
     410/     103 : B2                  		phi 	rRStack											
     411/     104 : B3                  		phi 	rDStack
     412/     105 : B5                  		phi 	rVariables
     413/     106 :                     
     414/     106 : 90                  		ghi 	r0 									; set up RF,RC,RD,R1 relies on all being in the same page as this.
     415/     107 : B1                  		phi 	rInterrupt
     416/     108 : BC                  		phi 	rc
     417/     109 : BD                  		phi 	rd
     418/     10A : BF                  		phi 	rf
     419/     10B :                     
     420/     10B : F8 62               		ldi 	ProgramCode & 255 					; RF now points to the address of the start
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 8 - 7/26/2016 10:40:32


     421/     10D : AF                  		plo 	rf
     422/     10E : 4F                  		lda 	rf 									; read start address of program into R4.
     423/     10F : B4                  		phi 	rProgram
     424/     110 : 4F                  		lda 	rf
     425/     111 : A4                  		plo 	rProgram 						
     426/     112 : 4F                  		lda 	rf 									; read data stack top, and set up that stack.
     427/     113 : A3                  		plo 	rDStack
     428/     114 :                     
     429/     114 : F8 1F               		ldi 	ExecuteCompiledWord & 255			; RC points to the code to execute the word at R4.
     430/     116 : AC                  		plo 	rc
     431/     117 : F8 3B               		ldi 	ExecuteDefinedWord & 255 			; RD points to the code to execute a new definition.
     432/     119 : AD                  		plo 	rd
     433/     11A : F8 4A               		ldi 	Interrupt & 255						; R1 points to the interrupt routine.
     434/     11C : A1                  		plo 	rInterrupt
     435/     11D :                     
     436/     11D : E3                  		sex  	rDStack 							; R3 points to data stack.
     437/     11E : DC                  		sep 	rc 									; and start.
     438/     11F :                     
     439/     11F :                     ; *************************************************************************************************************************
     440/     11F :                     ;
     441/     11F :                     ;	Execute the word at (R4). This is either a 1 byte call (00-F7) or a 2 byte call (F8-FF) nn
     442/     11F :                     ;	Runs in RC.
     443/     11F :                     ;
     444/     11F :                     ; *************************************************************************************************************************
     445/     11F :                     
     446/     11F :                     ExecuteCompiledWord:
     447/     11F : 44                  		lda 	rProgram 							; get the next instruction to execute.
     448/     120 : FC 08               		adi 	8 									; will cause a carry (DF = 1) for F8-FF
     449/     122 : 33 2F               		bdf 	ECW_LongAddress 					; which means it's a long address
     450/     124 :                     
     451/     124 : FF 08               		smi 	8 									; fix back to original value
     452/     126 : 32 35               		bz 		ECW_Return 							; if it was $00 that's a return.
     453/     128 : AF                  		plo 	rf 									; put in RF.0
     454/     129 : F8 00               		ldi 	0 									; set RF.1 to zero. RF now points to $000-$0F7.
     455/     12B : BF                  		phi 	rf 									
     456/     12C : DF                  		sep 	rf 									; run whatever is there.
     457/     12D : 30 1F               		br 		ExecuteCompiledWord 				; and when finished, do the next instruction.		
     458/     12F :                     ;
     459/     12F :                     ECW_LongAddress:									; 11 bit address
     460/     12F : BF                  		phi 	rf 									; it will be 00-07 after the add, so this is the upper byte in RF.1
     461/     130 : 44                  		lda 	rProgram 							; get the lower byte
     462/     131 : AF                  		plo 	rf 									; put in RF.0
     463/     132 : DF                  		sep 	rf 									; run whatever is there.
     464/     133 : 30 1F               		br 		ExecuteCompiledWord 				; and when finished, do the next instruction.		
     465/     135 :                     ;
     466/     135 :                     ECW_Return:
     467/     135 : 42                  		lda 	rRStack 							; retrieve the saved return address and put back in R4
     468/     136 : A4                  		plo 	rProgram
     469/     137 : 42                  		lda 	rRStack
     470/     138 : B4                  		phi 	rProgram
     471/     139 : 30 1F               		br 		ExecuteCompiledWord 				; and go do it.
     472/     13B :                     
     473/     13B :                     ; *************************************************************************************************************************
     474/     13B :                     ;
     475/     13B :                     ;	If the word executed via the SEP RFs is a compiled word, it will execute and be ended via SEP RC, which will execute
     476/     13B :                     ; 	the next word. 
     477/     13B :                     ;
     478/     13B :                     ;	If it is a sequence of commands the first instruction will be SEP RD, which will come here (with RF pointing to the
     479/     13B :                     ;	new code to execute)
     480/     13B :                     ;
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 9 - 7/26/2016 10:40:32


     481/     13B :                     ; *************************************************************************************************************************
     482/     13B :                     
     483/     13B :                     ExecuteDefinedWord:
     484/     13B : 22                  		dec 	rRStack 							; push R4, the program pointer on the return stack
     485/     13C : 94                  		ghi 	rProgram
     486/     13D : 52                  		str 	rRStack
     487/     13E : 22                  		dec 	rRStack
     488/     13F : 84                  		glo 	rProgram
     489/     140 : 52                  		str 	rRStack
     490/     141 :                     
     491/     141 : 9F                  		ghi 	rf 									; it was run in R4 (the SEP RD command), so RD will contain the next
     492/     142 : B4                  		phi 	rProgram 							; instruction, which we copy into R4
     493/     143 : 8F                  		glo 	rf
     494/     144 : A4                  		plo 	rProgram
     495/     145 : DC                  		sep 	rc 									; and run "ExecuteCompiledWord"
     496/     146 : 30 3B               		br 		ExecuteDefinedWord 					; this is re-entrant.
     497/     148 :                     
     498/     148 :                     ; *************************************************************************************************************************
     499/     148 :                     ;										Interrupt Routine (FRED version)
     500/     148 :                     ; *************************************************************************************************************************
     501/     148 :                     
     502/     148 :                     Return:	
     503/     148 : 42                  		lda 	rRStack 							; pop D
     504/     149 : 70                  		ret 										; pop XP
     505/     14A :                     Interrupt:
     506/     14A : 22                  		dec 	rRStack 							; save XP
     507/     14B : 78                  		sav
     508/     14C : 22                  		dec 	rRStack 							; save D
     509/     14D : 52                  		str 	rRStack
     510/     14E :                     
     511/     14E : F8 00               		ldi 	videoMemory & 255 					; set up R0
     512/     150 : A0                  		plo 	r0
     513/     151 : F8 07               		ldi 	videoMemory / 256
     514/     153 : B0                  		phi 	r0
     515/     154 : 1B                  		inc 	rCounter 							; bump the timer counter.
     516/     155 : 30 48               		br 		Return 		
     517/     157 :                     
     518/     157 :                     
     519/     157 :                     ; *************************************************************************************************************************
     520/     157 :                     ;
     521/     157 :                     ;												Draw Sprite routine
     522/     157 :                     ;
     523/     157 :                     ; *************************************************************************************************************************
     524/     157 :                     
     525/     157 :                     FW_DrawSprite:
     526/     157 : F8 00               		ldi 	videoMemory & 255
     527/     159 : A6                  		plo 	r6
     528/     15A : F8 07               		ldi 	videoMemory / 256
     529/     15C : B6                  		phi 	r6
     530/     15D : 56                  		str 	r6
     531/     15E : F8 35               		ldi 	ECW_Return & 255					; this forces a RETURN to be executed
     532/     160 : AC                  		plo 	rc
     533/     161 : DC                  		sep 	rc
     534/     162 :                     
     535/     162 :                     ; *************************************************************************************************************************
     536/     162 :                     ;
     537/     162 :                     ;		The first three bytes are the address of the first word to run, and the data stack initial value.
     538/     162 :                     ;
     539/     162 :                     ; *************************************************************************************************************************
     540/     162 :                     
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 10 - 7/26/2016 10:40:32


     541/     162 :                     ProgramCode:
     542/     162 : 01 65               		dw 		Start 								; [[$$STARTMARKER]] address of program start, not actually a word that can be called.
     543/     164 : A0                  		db 		0A0h 								; data stack starts here in variable page (and works down)
     544/     165 :                     
     545/     165 :                     ; *************************************************************************************************************************
     546/     165 :                     ;
     547/     165 :                     ;											Put any long words at this point
     548/     165 :                     ;
     549/     165 :                     ; *************************************************************************************************************************
     550/     165 :                     
     551/     165 :                     Start:												; [[$$TOPKERNEL]] it will trim these off.
     552/     165 : DF B9 06            		db  FW_2,FW_1,FW_Out
     553/     168 : E3 DF 06            		db 	FW_3,FW_2,FW_Out
     554/     16B :                     
     555/     16B : 96 0A 96 09         		db 	FW_Literal,10,FW_Literal,9
     556/     16F : F9 72               		dw 	FW_Drawer|0F800h
     557/     171 : DD                  		db 	FW_Stop
     558/     172 :                     FW_Drawer:
     559/     172 : DD                  		sep rd
     560/     173 : F9 57               		dw  FW_DrawSprite|0F800h
     561/     175 : 05                  		db 	5
     562/     176 : FF 81 4F 81 FF      		db 	0FFh,081h,04Fh,081h,0FFh
     563/     17B :                     
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 11 - 7/26/2016 10:40:32


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOT :                          FB C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
 DATAMEMORY :                   600 - | *DATE :                   7/26/2016 - |
 ECW_LONGADDRESS :              12F C |  ECW_RETURN :                   135 C |
 EXECUTECOMPILEDWORD :          11F C |  EXECUTEDEFINEDWORD :           13B C |
*FALSE :                          0 - | *FM_SETVARIABLEPAGE :            DA C |
*FULLPMMU :                       1 - |  FW_0 :                          AF C |
*FW_0BR :                        32 C |  FW_1 :                          B9 C |
*FW_10 :                         EF C | *FW_100 :                        F7 C |
*FW_16 :                         F3 C |  FW_2 :                          DF C |
 FW_3 :                          E3 C | *FW_4 :                          E7 C |
*FW_8 :                          EB C | *FW_ADD :                        82 C |
*FW_ADDSTORE :                   6B C | *FW_AND :                        8A C |
*FW_BR :                         2F C | *FW_DEC :                        77 C |
 FW_DRAWER :                    172 C |  FW_DRAWSPRITE :                157 C |
*FW_DROP :                       99 C | *FW_DUP :                        9E C |
*FW_EQUALS :                     D2 C |  FW_EQUALZERO :                  AC C |
*FW_FROMR :                      53 C | *FW_GREATERZERO :                BE C |
*FW_IN :                          2 C | *FW_INC :                        73 C |
 FW_IO :                          8 C | *FW_LESSZERO :                   B2 C |
 FW_LITERAL :                    96 C |  FW_MINUS1 :                     C5 C |
*FW_NEGATE :                     A6 C | *FW_OR :                         8E C |
 FW_OUT :                         6 C | *FW_OVER :                       A1 C |
*FW_PICK :                       17 C | *FW_QDUP :                       9B C |
*FW_READ :                       60 C | *FW_ROT :                        1F C |
*FW_SHIFTL :                     7F C | *FW_SHIFTR :                     7B C |
 FW_STOP :                       DD C | *FW_STORE :                      66 C |
 FW_SUB :                        86 C | *FW_SWAP :                       C9 C |
*FW_TOR :                        59 C | *FW_VARIABLEPAGE :               D6 C |
*FW_XOR :                        92 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INTERRUPT :                    14A C | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PROGRAMCODE :                  162 C |  R0 :                             0 - |
 R6 :                             6 - |  RC :                             C - |
 RCOUNTER :                       B - |  RD :                             D - |
 RDSTACK :                        3 - |  RE :                             E - |
*RELAXED :                        0 - |  RETURN :                       148 C |
 RF :                             F - |  RINTERRUPT :                     1 - |
 RPROGRAM :                       4 - |  RRSTACK :                        2 - |
 RVARIABLES :                     5 - |  START :                        165 C |
*TIME :                    10:40:32 - | *TRUE :                           1 - |
*VERSION :                     142F - |  VIDEOMEMORY :                  700 - |
 _PUSHD :                        BB C |  _SAVED :                        BC C |
 __0BR_BACKWARDS :               49 C |  __0BR_EXIT :                    47 C |
 __0BR_SAVER41EXIT :             46 C |  __ADDWR :                       83 C |
 __BRANCH :                      38 C |  __IO_DOIT :                     16 C |
 __RETURN :                      5F C |

    107 symbols
     62 unused symbols
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 12 - 7/26/2016 10:40:32



 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 13 - 7/26/2016 10:40:32


  defined macros:
  ---------------

LRI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 14 - 7/26/2016 10:40:32


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    563 lines source file
      2 passes
      0 errors
      0 warnings
