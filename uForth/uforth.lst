 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 1 - 7/26/2016 12:52:01


       1/       0 :                     ; *********************************************************************************************************************
       2/       0 :                     ; *********************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;		Core Runtime and Interpreter. Has a collection of 1801 code primitives, the bytecode interpreter and
       5/       0 :                     ;		the FRED display driver. 
       6/       0 :                     ;
       7/       0 :                     ;		Words in core are indicated by double square brackets in the comments, and are extracted from the list file.
       8/       0 :                     ; 		(so memory is not wasted storing the word name)
       9/       0 :                     ;
      10/       0 :                     ; *********************************************************************************************************************
      11/       0 :                     ; *********************************************************************************************************************
      12/       0 :                     
      13/       0 :                     		cpu 1802 									; actually it is a 1801.
      14/       0 :                     
      15/       0 : =0H                 r0 = 0 												; display pointer (R0)
      16/       0 : =1H                 rInterrupt = 1 										; interrupt address (R1)
      17/       0 : =2H                 rRStack = 2 										; return stack (R2)
      18/       0 : =3H                 rDStack = 3 										; data stack (R3)
      19/       0 : =4H                 rProgram = 4 										; program code pointer (R4)
      20/       0 : =5H                 rVariables = 5 										; points to variables (R5)
      21/       0 :                     
      22/       0 : =6H                 r6 = 6												; work registers (R6-R10, can also use RE)
      23/       0 : =7H                 r7 = 7
      24/       0 : =8H                 r8 = 8
      25/       0 : =9H                 r9 = 9
      26/       0 : =AH                 ra = 10
      27/       0 :                     
      28/       0 : =BH                 rCounter = 11 										; interrupt counter (RB, bumps every tick)
      29/       0 : =CH                 rc = 12 											; execute instruction at r4
      30/       0 : =DH                 rd = 13 											; makes instruction byte code
      31/       0 : =EH                 re = 14 											; general temporary register
      32/       0 : =FH                 rf = 15 											; pc register when running 1801 code.
      33/       0 :                     
      34/       0 :                     lri 	macro r,n 									; macro to load register.
      35/       0 :                     		ldi (n) & 255
      36/       0 :                     		plo r
      37/       0 :                     		ldi (n) / 256
      38/       0 :                     		phi r
      39/       0 :                     		endm
      40/       0 :                     
      41/       0 : =700H               videoMemory = 0700h 								; 64 x 32 Video RAM. Data memory is in the page below.
      42/       0 : =600H               dataMemory = 0600h									; data memory page.
      43/       0 :                     
      44/       0 : 30 FB               		br 		Boot 								; [[;]] skip over machine code. Also defines return (;) as $00
      45/       2 :                     
      46/       2 :                     ; *********************************************************************************************************************
      47/       2 :                     ;
      48/       2 :                     ;								Forth 1801 assembler primitives (optimisable for 1802)
      49/       2 :                     ;
      50/       2 :                     ;	@,!,+!,1+,1-,2*,2/,+,-,and,or,xor,literal,drop,dup,over,0-,0=,0<,0,1,-1,swap,R>,>R,0>,0BR,;,?DUP,ROT,0>,=,Pick
      51/       2 :                     ;	br,varpage,page!
      52/       2 :                     ; *********************************************************************************************************************
      53/       2 :                     ;					Note some of these drop through, so the order is important in some cases
      54/       2 :                     ;	When changing this code check the position of the GHI R0s in Boot, the first must be in page 0 the second 
      55/       2 :                     ;   in page 1.
      56/       2 :                     ; *********************************************************************************************************************
      57/       2 :                     
      58/       2 : F8 68               FW_In:	ldi 	068h								; [[PORT>]] input from port
      59/       4 : 30 08               		br 		FW_IO
      60/       6 : F8 60               FW_Out:	ldi 	060h 								; [[>PORT]] output to port.
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 2 - 7/26/2016 12:52:01


      61/       8 :                     
      62/       8 : AE                  FW_IO:	plo 	re 									; save in RE.0
      63/       9 :                     
      64/       9 : 22                  		dec 	rRStack	 							; push $DC (SEP RC) on return stack.
      65/       A : F8 DC               		ldi 	0DCh 								
      66/       C : 52                  		str 	rRStack
      67/       D :                     
      68/       D : 8E                  		glo 	re 									; get instruction base (INP or OUT)
      69/       E : F1                  		or 											; or with the port number
      70/       F : 22                  		dec 	rRStack 							; push on rstack
      71/      10 : 52                  		str 	rRStack
      72/      11 :                     
      73/      11 : FA 08               		ani 	008h 								; if IN, we need the old stack element for the result so we don't 
      74/      13 : 3A 16               		bnz 	__IO_DoIt 							; do this INC, which is throwing away the port address
      75/      15 : 13                  		inc 	rDStack 							; for OUT this leaves the data to be outed which post increments
      76/      16 :                     __IO_DoIt:
      77/      16 : D2                  		sep 	rRStack 							; run the code on the stack.
      78/      17 :                     
      79/      17 :                     ; *********************************************************************************************************************
      80/      17 :                     
      81/      17 :                     FW_Pick:
      82/      17 : 83                  		glo 	rDStack								; add TOS to DStack into RE
      83/      18 : F4                  		add 
      84/      19 : AE                  		plo 	re
      85/      1A : 93                  		ghi 	rDStack
      86/      1B : BE                  		phi 	re
      87/      1C : 4E                  		lda 	re 									; get the picked value
      88/      1D : 53                  		str 	rDStack 							; save at TOS
      89/      1E : DC                  		sep 	rc 									; and exit
      90/      1F :                     
      91/      1F :                     ; *********************************************************************************************************************
      92/      1F :                     
      93/      1F :                     FW_ROT:												; [[ROT]] rotate top 3 n1 n2 n3 -> n2 n3 n1
      94/      1F : 43                  		lda 	rDStack 							; get n3
      95/      20 : AE                  		plo 	re
      96/      21 : F0                  		ldx 										; get n2
      97/      22 : BE                  		phi 	re
      98/      23 : 8E                  		glo 	re 									; get n3
      99/      24 : 53                  		str 	rDStack 							; save where n2 was
     100/      25 : 13                  		inc 	rDStack 							; point to n1
     101/      26 : F0                  		ldx 										; read n1
     102/      27 : AE                  		plo 	re 									; save in RE.0
     103/      28 : 9E                  		ghi 	re 									; get n2
     104/      29 : 53                  		str 	rDStack 							; save where n1 was
     105/      2A : 23                  		dec 	rDStack 							; point r3 back to start
     106/      2B : 23                  		dec 	rDStack
     107/      2C : 8E                  		glo 	re 									; get n1
     108/      2D : 53                  		str 	rDStack
     109/      2E : DC                  		sep 	rc
     110/      2F :                     
     111/      2F :                     ; *********************************************************************************************************************
     112/      2F :                     
     113/      2F :                     FW_BR:												; [[BR]] Unconditional Branch
     114/      2F : 44                  		lda 	rProgram 							; read offset
     115/      30 : 30 38               		br 		__Branch 							; jump into 0BR after the tos = 0 test
     116/      32 :                     
     117/      32 :                     ; *********************************************************************************************************************
     118/      32 :                     
     119/      32 :                     FW_0BR: 											; [[0BR]] if pop = 0 then advance by <next> (7 bit signed)
     120/      32 : 44                  		lda 	rProgram 							; read offset into RE.0
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 3 - 7/26/2016 12:52:01


     121/      33 : AE                  		plo 	re 
     122/      34 :                     
     123/      34 : 43                  		lda 	rDStack 							; pop value off top of stack
     124/      35 : 3A 5F               		bnz 	__Return 							; if non zero, fail. 
     125/      37 :                     
     126/      37 : 8E                  		glo 	re 									; put value onto the data stack as a temporary measure
     127/      38 :                     __Branch:
     128/      38 : 23                  		dec 	rDStack
     129/      39 : 53                  		str 	rDStack
     130/      3A : FA 80               		ani 	080h 								; check bit 7
     131/      3C : 3A 49               		bnz 	__0BR_Backwards 					; if -ve it is a backward jump.
     132/      3E :                     
     133/      3E : 84                  		glo 	rProgram 							; add offset to R4/low
     134/      3F : F4                  		add
     135/      40 : A4                  		plo 	rProgram
     136/      41 : 3B 47               		bnf 	__0BR_Exit
     137/      43 : 94                  		ghi 	rProgram 							; add carry into R4
     138/      44 : FC 01               		adi 	1
     139/      46 :                     __0BR_SaveR41Exit:
     140/      46 : B4                  		phi 	rProgram
     141/      47 :                     __0BR_Exit:
     142/      47 : 13                  		inc 	rDStack 							; drop temp off stack
     143/      48 : DC                  		sep 	rc
     144/      49 :                     
     145/      49 :                     __0BR_Backwards:
     146/      49 : 84                  		glo 	rProgram 							; subtract from R4/Low
     147/      4A : F4                  		add 
     148/      4B : A4                  		plo 	rProgram
     149/      4C : 33 47               		bdf 	__0BR_Exit 							; not borrow, exit.
     150/      4E : 94                  		ghi 	rProgram 							; carry borrow through.
     151/      4F : FF 01               		smi 	1
     152/      51 : 30 46               		br 		__0BR_SaveR41Exit
     153/      53 :                     
     154/      53 :                     
     155/      53 :                     ; *********************************************************************************************************************
     156/      53 :                     
     157/      53 :                     FW_FromR:											; [[R>]] return stack to data stack
     158/      53 : 42                  		lda 	rRStack
     159/      54 : 23                  		dec 	rDStack
     160/      55 : 53                  		str 	rDStack
     161/      56 : 42                  		lda 	rRStack
     162/      57 : 30 BB               		br 		_PushD
     163/      59 :                     
     164/      59 :                     ; *********************************************************************************************************************
     165/      59 :                     
     166/      59 :                     FW_ToR:												; [[>R]] data stack to return stack
     167/      59 : 43                  		lda 	rDStack
     168/      5A : 22                  		dec 	rRStack
     169/      5B : 52                  		str 	rRStack
     170/      5C : 43                  		lda 	rDStack
     171/      5D : 22                  		dec 	rRStack
     172/      5E : 52                  		str 	rRStack
     173/      5F :                     __Return:
     174/      5F : DC                  		sep 	rc
     175/      60 :                     
     176/      60 :                     ; *********************************************************************************************************************
     177/      60 :                     
     178/      60 :                     FW_Read:	 										; [[@]] read from variable page.
     179/      60 : F0                  		ldx 										; read address 
     180/      61 : A5                  		plo 	rVariables 							; point RVariables to it
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 4 - 7/26/2016 12:52:01


     181/      62 : 45                  		lda 	rVariables 							; read rVariables
     182/      63 : 25                  		dec 	rVariables 							; unpick if overflowed.
     183/      64 : 30 BC               		br 		_SaveD 								; and write it out.
     184/      66 :                     
     185/      66 :                     ; *********************************************************************************************************************
     186/      66 :                     
     187/      66 :                     FW_Store:											; [[!]] write to variable page.
     188/      66 : 43                  		lda 	rDStack								; read address
     189/      67 : A5                  		plo 	rVariables 							; rVariables points to it
     190/      68 : 43                  		lda 	rDStack 							; read data
     191/      69 : 55                  		str 	rVariables 							; write it.
     192/      6A : DC                  		sep 	rc
     193/      6B :                     
     194/      6B :                     ; *********************************************************************************************************************
     195/      6B :                     
     196/      6B :                     FW_AddStore:										; [[+!]] add tos to memory
     197/      6B : 43                  		lda 	rDStack								; read address
     198/      6C : A5                  		plo 	rVariables 							; rVariables points to it
     199/      6D : 43                  		lda 	rDStack 							; read data
     200/      6E : E5                  		sex 	rVariables
     201/      6F : F4                  		add 										; add to memory
     202/      70 : E3                  		sex 	rDStack
     203/      71 : 55                  		str 	rVariables 							; write it.
     204/      72 : DC                  		sep 	rc
     205/      73 :                     
     206/      73 :                     ; *********************************************************************************************************************
     207/      73 :                     
     208/      73 :                     FW_Inc:												; [[1+]] Increment
     209/      73 : F8 01               		ldi 	1
     210/      75 : 30 83               		br 		__AddWr
     211/      77 :                     
     212/      77 :                     ; *********************************************************************************************************************
     213/      77 :                     
     214/      77 :                     FW_Dec:												; [[1-]] Increment
     215/      77 : F8 FF               		ldi 	0FFh
     216/      79 : 30 83               		br 		__AddWr
     217/      7B :                     
     218/      7B :                     ; *********************************************************************************************************************
     219/      7B :                     
     220/      7B :                     FW_ShiftR:											; [[2/]] Shift right
     221/      7B : F0                  		ldx  										; read it
     222/      7C : F6                  		shr 										; shift right
     223/      7D : 30 BC               		br 		_SaveD 								; write back.
     224/      7F :                     
     225/      7F :                     ; *********************************************************************************************************************
     226/      7F :                     
     227/      7F :                     FW_ShiftL:											; [[2*]] Shift left
     228/      7F : F0                  		ldx 										; read tos
     229/      80 : 30 83               		br 		__AddWr 							; add it to itself.
     230/      82 :                     
     231/      82 :                     ; *********************************************************************************************************************
     232/      82 :                     
     233/      82 :                     FW_Add:												; [[+]] add top of stack values.
     234/      82 : 43                  		lda 	rDStack 							; read TOS
     235/      83 : F4                  __AddWr:add
     236/      84 : 30 BC               		br 		_SaveD
     237/      86 :                     
     238/      86 :                     ; *********************************************************************************************************************
     239/      86 :                     
     240/      86 :                     FW_Sub:												; [[-]] sub top of stack values.
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 5 - 7/26/2016 12:52:01


     241/      86 : 43                  		lda 	rDStack 							; read TOS
     242/      87 : F5                  		sd
     243/      88 : 30 BC               		br 		_SaveD
     244/      8A :                     
     245/      8A :                     ; *********************************************************************************************************************
     246/      8A :                     
     247/      8A :                     FW_And:												; [[and]] and top of stack values.
     248/      8A : 43                  		lda 	rDStack 							; read TOS
     249/      8B : F2                  		and
     250/      8C : 30 BC               		br 		_SaveD
     251/      8E :                     
     252/      8E :                     ; *********************************************************************************************************************
     253/      8E :                     
     254/      8E :                     FW_Or:												; [[or]] or top of stack values.
     255/      8E : 43                  		lda 	rDStack 							; read TOS
     256/      8F : F1                  		or
     257/      90 : 30 BC               		br 		_SaveD
     258/      92 :                     
     259/      92 :                     ; *********************************************************************************************************************
     260/      92 :                     
     261/      92 :                     FW_Xor:												; [[xor]] xor top of stack values.
     262/      92 : 43                  		lda 	rDStack 							; read TOS
     263/      93 : F3                  		xor
     264/      94 : 30 BC               		br 		_SaveD
     265/      96 :                     
     266/      96 :                     ; *********************************************************************************************************************
     267/      96 :                     
     268/      96 :                     FW_Literal:											; [[LITERAL]], code loads literal to TOS
     269/      96 : 44                  		lda 	rProgram 							; read the literal in
     270/      97 : 30 BB               		br 		_PushD 								; push on stack
     271/      99 :                     
     272/      99 :                     ; *********************************************************************************************************************
     273/      99 :                     
     274/      99 :                     FW_Drop:											; [[DROP]], drops top of stack.
     275/      99 : 43                  		lda 	rDStack 							
     276/      9A : DC                  		sep 	rc
     277/      9B :                     
     278/      9B :                     ; *********************************************************************************************************************
     279/      9B :                     
     280/      9B :                     FW_QDup:											; [[?DUP]] word, duplicate if non zero else drop.
     281/      9B : F0                  		ldx 										; look at TOS
     282/      9C : 32 5F               		bz 		__Return 							; if zero leave unchanged, else drop through to DUP.
     283/      9E :                     
     284/      9E :                     ; *********************************************************************************************************************
     285/      9E :                     
     286/      9E :                     FW_Dup:												; [[DUP]], duplicate top of stack
     287/      9E : F0                  		ldx 										; read top of stack.
     288/      9F : 30 BB               		br 		_PushD
     289/      A1 :                     
     290/      A1 :                     ; *********************************************************************************************************************
     291/      A1 :                     
     292/      A1 : 13                  FW_Over:inc 	rDStack 							; [[OVER]] point to 2nd value
     293/      A2 : F0                  		ldx 										; read value
     294/      A3 : 23                  		dec 	rDStack 							; unpick increment
     295/      A4 : 30 BB               		br 		_PushD
     296/      A6 :                     
     297/      A6 :                     ; *********************************************************************************************************************
     298/      A6 :                     
     299/      A6 :                     FW_Negate: 											; [[0-]] Word, negates top of stack
     300/      A6 : 43                  		lda 	rDStack
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 6 - 7/26/2016 12:52:01


     301/      A7 : 23                  		dec 	rDStack
     302/      A8 : FD 00               		sdi 	0
     303/      AA : 30 BC               		br 		_SaveD
     304/      AC :                     
     305/      AC :                     ; *********************************************************************************************************************
     306/      AC :                     
     307/      AC :                     FW_EqualZero:										; [[0=]] Word, sets to -1 if TOS zero 0 otherwise.
     308/      AC : 43                  		lda 	rDStack 							; get TOS
     309/      AD : 32 C5               		bz 		FW_Minus1 							; if zero, push -1 else push 0 (fall through)
     310/      AF :                     
     311/      AF :                     ; *********************************************************************************************************************
     312/      AF :                     
     313/      AF :                     FW_0:	
     314/      AF : 9F                  		ghi 	rf 									; [[0]] Word, pushes 0 on stack.
     315/      B0 : 30 BB               		br 		_PushD
     316/      B2 :                     
     317/      B2 :                     ; *********************************************************************************************************************
     318/      B2 :                     
     319/      B2 :                     FW_LessZero:										; [[0<]] Word, push 1 if negative else push 0
     320/      B2 : 43                  		lda 	rDStack 							; get TOS
     321/      B3 : FA 80               		ani 	080h								; look at the sign bit.
     322/      B5 : 32 AF               		bz 		FW_0 								; if +ve push 0 else drop through and push 1.
     323/      B7 : 30 C5               		br 		FW_Minus1
     324/      B9 :                     
     325/      B9 :                     ; *********************************************************************************************************************
     326/      B9 :                     
     327/      B9 :                     FW_1:	
     328/      B9 : F8 01               		ldi 	1 									; [[1]] Word, pushes -1 on stack
     329/      BB :                     
     330/      BB : 23                  _PushD:	dec 	rDStack 							; push on stack.
     331/      BC : 53                  _SaveD:	str 	rDStack
     332/      BD : DC                  		sep 	rc
     333/      BE :                     
     334/      BE :                     ; *********************************************************************************************************************
     335/      BE :                     
     336/      BE :                     FW_GreaterZero:										; [[0>]] Word, push -1 if >0 else push 0
     337/      BE : 43                  		lda 	rDStack 							; get value
     338/      BF : 32 AF               		bz 		FW_0 								; zero returns 0
     339/      C1 : FA 80               		ani 	80h									; check bit 7
     340/      C3 : 3A AF               		bnz 	FW_0 								; -ve returns 0
     341/      C5 :                     
     342/      C5 :                     ; *********************************************************************************************************************
     343/      C5 :                     
     344/      C5 :                     FW_Minus1:	
     345/      C5 : F8 FF               		ldi 	0FFh								; [[-1]] Word, pushes -1 on stack.
     346/      C7 : 30 BB               		br 		_PushD
     347/      C9 :                     
     348/      C9 :                     ; *********************************************************************************************************************
     349/      C9 :                     
     350/      C9 :                     FW_Swap:											; [[SWAP]] swap tos values.
     351/      C9 : 43                  		lda 	rDStack 							; read TOS, save in RE.0
     352/      CA : AE                  		plo 	re
     353/      CB : F0                  		ldx 										; read new TOS save in RE.1
     354/      CC : BE                  		phi 	re
     355/      CD : 8E                  		glo 	re 									; get value that is written
     356/      CE : 53                  		str 	rDStack
     357/      CF : 9E                  		ghi 	re 									; get value to push
     358/      D0 : 30 BB               		br 		_PushD
     359/      D2 :                     
     360/      D2 :                     ; *********************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 7 - 7/26/2016 12:52:01


     361/      D2 :                     
     362/      D2 :                     FW_Equals:											; [[=]] check top two values equal
     363/      D2 : DD                  		sep 	rd
     364/      D3 : 86                  		db 		FW_Sub
     365/      D4 : AC                  		db 		FW_EqualZero
     366/      D5 : 00                  		db 		0 
     367/      D6 :                     
     368/      D6 :                     ; *********************************************************************************************************************
     369/      D6 :                     
     370/      D6 :                     FW_VariablePage:
     371/      D6 : F8 06               		ldi 	dataMemory / 256 					; [[VARPAGE]] pushes the page address of variables on the stack.
     372/      D8 : 30 BB               		br 		_PushD
     373/      DA :                     
     374/      DA :                     ; *********************************************************************************************************************
     375/      DA :                     
     376/      DA :                     FM_SetVariablePage:
     377/      DA : 43                  		lda 	rDStack 							; [[PAGE!]] sets the variable page from the default.
     378/      DB : B5                  		phi 	rVariables
     379/      DC : DC                  		sep 	rc
     380/      DD :                     
     381/      DD :                     ; *********************************************************************************************************************
     382/      DD :                     
     383/      DD : 30 DD               FW_Stop:br 		FW_Stop								; [[STOP]] word
     384/      DF :                     
     385/      DF :                     ; *********************************************************************************************************************
     386/      DF :                     
     387/      DF : F8 02               FW_2:	ldi 	2 									; [[2]]
     388/      E1 : 30 BB               		br 		_PushD
     389/      E3 : F8 03               FW_3:	ldi 	3 									; [[3]]
     390/      E5 : 30 BB               		br 		_PushD
     391/      E7 : F8 04               FW_4:	ldi 	4 									; [[4]]
     392/      E9 : 30 BB               		br 		_PushD
     393/      EB : F8 08               FW_8:	ldi 8 										; [[8]]
     394/      ED : 30 BB               		br 		_PushD
     395/      EF : F8 0A               FW_10:	ldi 	10 									; [[10]]
     396/      F1 : 30 BB               		br 		_PushD
     397/      F3 : F8 10               FW_16:	ldi 16 										; [[16]]
     398/      F5 : 30 BB               		br 		_PushD	
     399/      F7 : F8 64               FW_100:	ldi 100 									; [[100]]
     400/      F9 : 30 BB               		br 		_PushD
     401/      FB :                     
     402/      FB :                     ; *********************************************************************************************************************
     403/      FB :                     ;
     404/      FB :                     ;											Start up uForth interpreter
     405/      FB :                     ;
     406/      FB :                     ; *********************************************************************************************************************
     407/      FB :                     
     408/      FB : 90                  Boot:	ghi 	r0 									; reset counter
     409/      FC : BB                  		phi 	rCounter 							
     410/      FD : AB                  		plo 	rCounter
     411/      FE :                     
     412/      FE : F8 FF               		ldi 	0FFh 								; reset return stack to end of data page
     413/     100 : A2                  		plo 	rRStack
     414/     101 : F8 06               		ldi 	dataMemory / 256 					; set high address for the stacks and variable area (same page)
     415/     103 : B2                  		phi 	rRStack											
     416/     104 : B3                  		phi 	rDStack
     417/     105 : B5                  		phi 	rVariables
     418/     106 :                     
     419/     106 : 90                  		ghi 	r0 									; set up RF,RC,RD,R1 relies on all being in the same page as this.
     420/     107 : B1                  		phi 	rInterrupt
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 8 - 7/26/2016 12:52:01


     421/     108 : BC                  		phi 	rc
     422/     109 : BD                  		phi 	rd
     423/     10A : BF                  		phi 	rf
     424/     10B :                     
     425/     10B : F8 A4               		ldi 	ProgramCode & 255 					; RF now points to the address of the start
     426/     10D : AF                  		plo 	rf
     427/     10E : 4F                  		lda 	rf 									; read start address of program into R4.
     428/     10F : B4                  		phi 	rProgram
     429/     110 : 4F                  		lda 	rf
     430/     111 : A4                  		plo 	rProgram 						
     431/     112 : 4F                  		lda 	rf 									; read data stack top, and set up that stack.
     432/     113 : A3                  		plo 	rDStack
     433/     114 :                     
     434/     114 : F8 1F               		ldi 	ExecuteCompiledWord & 255			; RC points to the code to execute the word at R4.
     435/     116 : AC                  		plo 	rc
     436/     117 : F8 3B               		ldi 	ExecuteDefinedWord & 255 			; RD points to the code to execute a new definition.
     437/     119 : AD                  		plo 	rd
     438/     11A : F8 4A               		ldi 	Interrupt & 255						; R1 points to the interrupt routine.
     439/     11C : A1                  		plo 	rInterrupt
     440/     11D :                     
     441/     11D : E3                  		sex  	rDStack 							; R3 points to data stack.
     442/     11E : DC                  		sep 	rc 									; and start.
     443/     11F :                     
     444/     11F :                     ; *************************************************************************************************************************
     445/     11F :                     ;
     446/     11F :                     ;	Execute the word at (R4). This is either a 1 byte call (00-F7) or a 2 byte call (F8-FF) nn
     447/     11F :                     ;	Runs in RC.
     448/     11F :                     ;
     449/     11F :                     ; *************************************************************************************************************************
     450/     11F :                     
     451/     11F :                     ExecuteCompiledWord:
     452/     11F : 44                  		lda 	rProgram 							; get the next instruction to execute.
     453/     120 : FC 08               		adi 	8 									; will cause a carry (DF = 1) for F8-FF
     454/     122 : 33 2F               		bdf 	ECW_LongAddress 					; which means it's a long address
     455/     124 :                     
     456/     124 : FF 08               		smi 	8 									; fix back to original value
     457/     126 : 32 35               		bz 		ECW_Return 							; if it was $00 that's a return.
     458/     128 : AF                  		plo 	rf 									; put in RF.0
     459/     129 : F8 00               		ldi 	0 									; set RF.1 to zero. RF now points to $000-$0F7.
     460/     12B : BF                  		phi 	rf 									
     461/     12C : DF                  		sep 	rf 									; run whatever is there.
     462/     12D : 30 1F               		br 		ExecuteCompiledWord 				; and when finished, do the next instruction.		
     463/     12F :                     ;
     464/     12F :                     ECW_LongAddress:									; 11 bit address
     465/     12F : BF                  		phi 	rf 									; it will be 00-07 after the add, so this is the upper byte in RF.1
     466/     130 : 44                  		lda 	rProgram 							; get the lower byte
     467/     131 : AF                  		plo 	rf 									; put in RF.0
     468/     132 : DF                  		sep 	rf 									; run whatever is there.
     469/     133 : 30 1F               		br 		ExecuteCompiledWord 				; and when finished, do the next instruction.		
     470/     135 :                     ;
     471/     135 :                     ECW_Return:
     472/     135 : 42                  		lda 	rRStack 							; retrieve the saved return address and put back in R4
     473/     136 : A4                  		plo 	rProgram
     474/     137 : 42                  		lda 	rRStack
     475/     138 : B4                  		phi 	rProgram
     476/     139 : 30 1F               		br 		ExecuteCompiledWord 				; and go do it.
     477/     13B :                     
     478/     13B :                     ; *************************************************************************************************************************
     479/     13B :                     ;
     480/     13B :                     ;	If the word executed via the SEP RFs is a compiled word, it will execute and be ended via SEP RC, which will execute
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 9 - 7/26/2016 12:52:01


     481/     13B :                     ; 	the next word. 
     482/     13B :                     ;
     483/     13B :                     ;	If it is a sequence of commands the first instruction will be SEP RD, which will come here (with RF pointing to the
     484/     13B :                     ;	new code to execute)
     485/     13B :                     ;
     486/     13B :                     ; *************************************************************************************************************************
     487/     13B :                     
     488/     13B :                     ExecuteDefinedWord:
     489/     13B : 22                  		dec 	rRStack 							; push R4, the program pointer on the return stack
     490/     13C : 94                  		ghi 	rProgram
     491/     13D : 52                  		str 	rRStack
     492/     13E : 22                  		dec 	rRStack
     493/     13F : 84                  		glo 	rProgram
     494/     140 : 52                  		str 	rRStack
     495/     141 :                     
     496/     141 : 9F                  		ghi 	rf 									; it was run in R4 (the SEP RD command), so RD will contain the next
     497/     142 : B4                  		phi 	rProgram 							; instruction, which we copy into R4
     498/     143 : 8F                  		glo 	rf
     499/     144 : A4                  		plo 	rProgram
     500/     145 : DC                  		sep 	rc 									; and run "ExecuteCompiledWord"
     501/     146 : 30 3B               		br 		ExecuteDefinedWord 					; this is re-entrant.
     502/     148 :                     
     503/     148 :                     ; *************************************************************************************************************************
     504/     148 :                     ;										Interrupt Routine (FRED version)
     505/     148 :                     ; *************************************************************************************************************************
     506/     148 :                     
     507/     148 :                     Return:	
     508/     148 : 42                  		lda 	rRStack 							; pop D
     509/     149 : 70                  		ret 										; pop XP
     510/     14A :                     Interrupt:
     511/     14A : 22                  		dec 	rRStack 							; save XP
     512/     14B : 78                  		sav
     513/     14C : 22                  		dec 	rRStack 							; save D
     514/     14D : 52                  		str 	rRStack
     515/     14E :                     
     516/     14E : F8 00               		ldi 	videoMemory & 255 					; set up R0
     517/     150 : A0                  		plo 	r0
     518/     151 : F8 07               		ldi 	videoMemory / 256
     519/     153 : B0                  		phi 	r0
     520/     154 : 1B                  		inc 	rCounter 							; bump the timer counter.
     521/     155 : 30 48               		br 		Return 		
     522/     157 :                     
     523/     157 :                     
     524/     157 :                     ; *************************************************************************************************************************
     525/     157 :                     ;
     526/     157 :                     ;												Draw Sprite routine
     527/     157 :                     ;
     528/     157 :                     ;	Note: if used on a 1802 the bit shifting can be simplified using the 1802's ring shift. A 1801 only has a shift
     529/     157 :                     ;	right into DF, so in a 1801 you have two seperate bits of code for the 16 bit shift.
     530/     157 :                     ; *************************************************************************************************************************
     531/     157 :                     
     532/     157 :                     FW_DrawSprite:										; [[SPRITE]] y x sprite
     533/     157 : 43                  		lda 	rDStack 							; get Y
     534/     158 : 23                  		dec 	rDStack 							; X = DStack = Y
     535/     159 : F4                  		add 										; D = Y * 2
     536/     15A : 53                  		str 	rDStack
     537/     15B : F4                  		add 										; D = Y * 4
     538/     15C : 53                  		str 	rDStack
     539/     15D : F4                  		add 										; D = Y * 8
     540/     15E : A6                  		plo 	r6 									; R6.0 = Y * 8
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 10 - 7/26/2016 12:52:01


     541/     15F : 13                  		inc 	rDStack 							; drop Y
     542/     160 :                     
     543/     160 : 43                  		lda 	rDStack 							; fetch X
     544/     161 : B7                  		phi 	r7 									; save in R7.1 this is used for the shift count.
     545/     162 : F6                  		shr
     546/     163 : F6                  		shr
     547/     164 : F6                  		shr 										; divide by 8.
     548/     165 : 23                  		dec 	rDStack 							; save on DStack address
     549/     166 : 53                  		str 	rDStack
     550/     167 : 86                  		glo 	r6 									; add Y * 8 to it
     551/     168 : F4                  		add
     552/     169 : A6                  		plo 	r6 									
     553/     16A : F8 07               		ldi 	videoMemory / 256 					; R6 points to video RAM write byte
     554/     16C : B6                  		phi 	r6
     555/     16D :                     
     556/     16D : 44                  		lda 	rProgram 							; get the sprite size, it is 8 x n
     557/     16E : A7                  		plo 	r7 									; R7.0 is the count of lines.
     558/     16F : 32 9E               		bz 		__SDExit 							; if line count is zero exit.
     559/     171 : E6                  		sex 	r6 									; we use X = 6 to access video memory.
     560/     172 :                     __SDLineLoop:
     561/     172 :                     
     562/     172 : 44                  		lda 	rProgram 							; R8 is the byte shifting graphic
     563/     173 : B8                  		phi 	r8
     564/     174 : F8 00               		ldi 	0
     565/     176 : A8                  		plo 	r8 
     566/     177 :                     
     567/     177 : 97                  		ghi 	r7 									; get original X value
     568/     178 : FA 07               		ani 	7 									; look at lower 3 bits, which is the right-shift
     569/     17A : 32 8F               		bz 		__SDXorScreen 						; if zero no shift required
     570/     17C : A9                  		plo 	r9 									; R9.0 is the shift counter
     571/     17D :                     __SDShiftRight:
     572/     17D : 98                  		ghi 	r8 									; shift R8.1 right 
     573/     17E : F6                  		shr
     574/     17F : B8                  		phi 	r8
     575/     180 : 33 86               		bdf 	__SDShiftRight1 					; if Df set need to shift a 1 into R8.0
     576/     182 : 88                  		glo 	r8
     577/     183 : F6                  		shr
     578/     184 : 30 8A               		br 		__SDShiftDone 
     579/     186 :                     ;
     580/     186 :                     __SDShiftRight1: 									; we have to do it this way, 1801 as now Ring Shift
     581/     186 : 88                  		glo 	r8 									; this one shifts a 1 in as the MSB - the code immediately
     582/     187 : F6                  		shr 										; above shifts a 0 in as the MSB.
     583/     188 : F9 80               		ori 	080h
     584/     18A :                     
     585/     18A :                     __SDShiftDone:
     586/     18A : A8                  		plo 	r8 									; write low byte back
     587/     18B : 29                  		dec 	r9 									; do it the relevant number of times.
     588/     18C : 89                  		glo 	r9
     589/     18D : 3A 7D               		bnz 	__SDShiftRight
     590/     18F :                     
     591/     18F :                     __SDXorScreen:
     592/     18F : 98                  		ghi 	r8 									; do high byte
     593/     190 : F3                  		xor
     594/     191 : 56                  		str 	r6
     595/     192 : 16                  		inc 	r6
     596/     193 : 88                  		glo 	r8 									; do low byte.
     597/     194 : F3                  		xor 
     598/     195 : 56                  		str 	r6
     599/     196 :                     
     600/     196 : 86                  		glo 	r6 									; next line down.
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 11 - 7/26/2016 12:52:01


     601/     197 : FC 07               		adi 	7
     602/     199 : A6                  		plo 	r6
     603/     19A :                     
     604/     19A : 27                  		dec 	r7 									; decrement line count.
     605/     19B : 87                  		glo 	r7
     606/     19C : 3A 72               		bnz 		__SDLineLoop
     607/     19E :                     
     608/     19E :                     __SDExit:
     609/     19E : F8 35               		ldi 	ECW_Return & 255					; this forces a RETURN to be executed
     610/     1A0 : AC                  		plo 	rc
     611/     1A1 : E3                  		sex 	rDStack 							; X is back at rDStack
     612/     1A2 : 13                  		inc 	rDStack 							; fix up data stack.
     613/     1A3 : DC                  		sep 	rc
     614/     1A4 :                     
     615/     1A4 :                     ; *************************************************************************************************************************
     616/     1A4 :                     ;
     617/     1A4 :                     ;		The first three bytes are the address of the first word to run, and the data stack initial value.
     618/     1A4 :                     ;
     619/     1A4 :                     ; *************************************************************************************************************************
     620/     1A4 :                     
     621/     1A4 :                     ProgramCode:
     622/     1A4 : 01 A7               		dw 		Start 								; [[$$STARTMARKER]] address of program start, not actually a word that can be called.
     623/     1A6 : A0                  		db 		0A0h 								; data stack starts here in variable page (and works down)
     624/     1A7 :                     
     625/     1A7 :                     ; *************************************************************************************************************************
     626/     1A7 :                     ;
     627/     1A7 :                     ;											Put any long words at this point
     628/     1A7 :                     ;
     629/     1A7 :                     ; *************************************************************************************************************************
     630/     1A7 :                     
     631/     1A7 :                     Start:												; [[$$TOPKERNEL]] it will trim these off.
     632/     1A7 : DF B9 06            		db  FW_2,FW_1,FW_Out 						; screen on.
     633/     1AA : E3 DF 06            		db 	FW_3,FW_2,FW_Out
     634/     1AD :                     
     635/     1AD :                     Loop1:
     636/     1AD : 96 0A 96 09         		db 	FW_Literal,10,FW_Literal,9
     637/     1B1 : F9 F8               		dw 	FW_Drawer|0F800h
     638/     1B3 : 96 0B 96 0E         		db 	FW_Literal,11,FW_Literal,14
     639/     1B7 : F9 F8               		dw 	FW_Drawer|0F800h
     640/     1B9 : 96 0C 96 13         		db 	FW_Literal,12,FW_Literal,19
     641/     1BD : F9 F8               		dw 	FW_Drawer|0F800h
     642/     1BF : 96 0D 96 18         		db 	FW_Literal,13,FW_Literal,24
     643/     1C3 : F9 F8               		dw 	FW_Drawer|0F800h
     644/     1C5 : 96 1E 96 09         		db 	FW_Literal,30,FW_Literal,9
     645/     1C9 : F9 F8               		dw 	FW_Drawer|0F800h
     646/     1CB : 96 1F 96 0E         		db 	FW_Literal,31,FW_Literal,14
     647/     1CF : F9 F8               		dw 	FW_Drawer|0F800h
     648/     1D1 : 96 20 96 13         		db 	FW_Literal,32,FW_Literal,19
     649/     1D5 : F9 F8               		dw 	FW_Drawer|0F800h
     650/     1D7 : 96 21 96 18         		db 	FW_Literal,33,FW_Literal,24
     651/     1DB : F9 F8               		dw 	FW_Drawer|0F800h
     652/     1DD : 96 32 96 09         		db 	FW_Literal,50,FW_Literal,9
     653/     1E1 : F9 F8               		dw 	FW_Drawer|0F800h
     654/     1E3 : 96 33 96 0E         		db 	FW_Literal,51,FW_Literal,14
     655/     1E7 : F9 F8               		dw 	FW_Drawer|0F800h
     656/     1E9 : 96 34 96 13         		db 	FW_Literal,52,FW_Literal,19
     657/     1ED : F9 F8               		dw 	FW_Drawer|0F800h
     658/     1EF : 96 35 96 18         		db 	FW_Literal,53,FW_Literal,24
     659/     1F3 : F9 F8               		dw 	FW_Drawer|0F800h
     660/     1F5 :                     
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 12 - 7/26/2016 12:52:01


     661/     1F5 : 2F B6               		db 	FW_BR,-26-24-24
     662/     1F7 : DD                  		db 	FW_Stop
     663/     1F8 :                     
     664/     1F8 :                     FW_Drawer:
     665/     1F8 : DD                  		sep rd
     666/     1F9 : F9 57               		dw  FW_DrawSprite|0F800h
     667/     1FB : 05                  		db 	5
     668/     1FC : FF 81 4F 81 FF      		db 	0FFh,081h,04Fh,081h,0FFh
     669/     201 :                     
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 13 - 7/26/2016 12:52:01


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOT :                          FB C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
 DATAMEMORY :                   600 - | *DATE :                   7/26/2016 - |
 ECW_LONGADDRESS :              12F C |  ECW_RETURN :                   135 C |
 EXECUTECOMPILEDWORD :          11F C |  EXECUTEDEFINEDWORD :           13B C |
*FALSE :                          0 - | *FM_SETVARIABLEPAGE :            DA C |
*FULLPMMU :                       1 - |  FW_0 :                          AF C |
*FW_0BR :                        32 C |  FW_1 :                          B9 C |
*FW_10 :                         EF C | *FW_100 :                        F7 C |
*FW_16 :                         F3 C |  FW_2 :                          DF C |
 FW_3 :                          E3 C | *FW_4 :                          E7 C |
*FW_8 :                          EB C | *FW_ADD :                        82 C |
*FW_ADDSTORE :                   6B C | *FW_AND :                        8A C |
 FW_BR :                         2F C | *FW_DEC :                        77 C |
 FW_DRAWER :                    1F8 C |  FW_DRAWSPRITE :                157 C |
*FW_DROP :                       99 C | *FW_DUP :                        9E C |
*FW_EQUALS :                     D2 C |  FW_EQUALZERO :                  AC C |
*FW_FROMR :                      53 C | *FW_GREATERZERO :                BE C |
*FW_IN :                          2 C | *FW_INC :                        73 C |
 FW_IO :                          8 C | *FW_LESSZERO :                   B2 C |
 FW_LITERAL :                    96 C |  FW_MINUS1 :                     C5 C |
*FW_NEGATE :                     A6 C | *FW_OR :                         8E C |
 FW_OUT :                         6 C | *FW_OVER :                       A1 C |
*FW_PICK :                       17 C | *FW_QDUP :                       9B C |
*FW_READ :                       60 C | *FW_ROT :                        1F C |
*FW_SHIFTL :                     7F C | *FW_SHIFTR :                     7B C |
 FW_STOP :                       DD C | *FW_STORE :                      66 C |
 FW_SUB :                        86 C | *FW_SWAP :                       C9 C |
*FW_TOR :                        59 C | *FW_VARIABLEPAGE :               D6 C |
*FW_XOR :                        92 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INTERRUPT :                    14A C | *LISTON :                         1 - |
*LOOP1 :                        1AD C | *MACEXP :                         1 - |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PROGRAMCODE :                  1A4 C |
 R0 :                             0 - |  R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - | *RA :                             A - |
 RC :                             C - |  RCOUNTER :                       B - |
 RD :                             D - |  RDSTACK :                        3 - |
 RE :                             E - | *RELAXED :                        0 - |
 RETURN :                       148 C |  RF :                             F - |
 RINTERRUPT :                     1 - |  RPROGRAM :                       4 - |
 RRSTACK :                        2 - |  RVARIABLES :                     5 - |
 START :                        1A7 C | *TIME :                    12:52:01 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 VIDEOMEMORY :                  700 - |  _PUSHD :                        BB C |
 _SAVED :                        BC C |  __0BR_BACKWARDS :               49 C |
 __0BR_EXIT :                    47 C |  __0BR_SAVER41EXIT :             46 C |
 __ADDWR :                       83 C |  __BRANCH :                      38 C |
 __IO_DOIT :                     16 C |  __RETURN :                      5F C |
 __SDEXIT :                     19E C |  __SDLINELOOP :                 172 C |
 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 14 - 7/26/2016 12:52:01


 __SDSHIFTDONE :                18A C |  __SDSHIFTRIGHT :               17D C |
 __SDSHIFTRIGHT1 :              186 C |  __SDXORSCREEN :                18F C |

    118 symbols
     63 unused symbols

 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 15 - 7/26/2016 12:52:01


  defined macros:
  ---------------

LRI                                   |

      1 macro

 AS V1.42 Beta [Bld 102] - source file uforth.asm - page 16 - 7/26/2016 12:52:01


  codepages:
  ----------

STANDARD (0 changed characters)


0.00 seconds assembly time

    669 lines source file
      2 passes
      0 errors
      0 warnings
