//
//	Conway's Life, originallly programmed by M. Blecker
//
//	Written by Paul Robson July 2016
//

: initialise 2 1 >port 3 2 >Port 1 1 >port 1 2 >Port ;								// Turn screen and keyboard on ( - )

: key random drop inkey dup 0< if drop self then ;									// Wait for key stroke ( - key)

// Screen storage is both in page 7. The left half is the current state, the right half the next state.
// For scanning, the challenging bit it is usually stored as mask (e.g. $80) and screen address low byte
// hence the proliferation of over over.


: checkCell 					// (mask address - mask address) of next cell down
	//over over @ or over ! 
	over over @ and if 1 0 +! then 8 + ;

: getCurrentCell over over @ and 0= 0= 1 ! 8 + ;

: aliveLogic 0 @ 2/ 1 = ;
: deadLogic 0 @ 3 = ;
: getNewStatus 1 @ if aliveLogic ; deadLogic ;

: setNextOn over over 12 + @ or over 12 + ! ; // (mask address - ) 4 across 1 line down hence 12
	

: moveRight swap 2/ ?dup 0= if 1+ $80 then swap ;

: canOptimise dup @ over 8 + @ + over 16 + @ + if 0 ; 	// if this byte and two below are 0 & mask is 8 or higher optimise out
	over $FC and ;

: countCells 					// (mask address - mask address)
	canOptimise if moveRight ;							// speed up mostly empty screen.

	over over 
	0 0 ! 0 1 ! 										// clear count (0) original (1)

	checkCell checkCell checkCell 24 - moveRight 		// count cells.
	checkCell getCurrentCell checkCell 24 - moveRight
	checkCell checkCell checkCell drop drop
	moveRight 											// move right to next cell.
	getNewStatus if setNextOn then ;

: cc4 countCells countCells countCells countCells dup 7 ! ;

: doOneRowCells 
	cc4 cc4 cc4 cc4 cc4 cc4 cc4 cc4 4 + ;

: doCellsToEndOfScreen
	doOneRowCells dup $F7 = if ; self


: glider sprite [034020E0]

: copy1 dup 4 + @ over ! dup 4 + 0 swap ! 1+ ;
: copy4 copy1 copy1 copy1 copy1 4 + ;

: copyRest copy4 dup $F8 = if ; self

: oneScreen 	
	$01 $0F doCellsToEndOfScreen drop drop	$10 copyRest drop ;

: __main
	initialise 7 page! 
	clearscreen 
	4 5 glider

	oneScreen 
	stop
